//init 'stack' pointer
@256
D=A
@SP
M=D
//call Sys.init
@Sys.init$ret0
D=A
@SP
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@5
D=A-D
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init$ret0)
//function Main.fibonacci 0
(Main.fibonacci)
//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
M=D
@SP
AM=M+1
//push constant 2
@2
D=A
@SP
M=D
@SP
AM=M+1
//lt                     // checks if n<2
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@LT_0
D;JLT
@SP
A=M-1
M=0
(LT_0)
//if-goto IF_TRUE
@SP
AM=M-1
D=M
@IF_TRUE
D;JNE
//goto IF_FALSE
@IF_FALSE
0;JMP
//label IF_TRUE          // if n<2, return n
(IF_TRUE)
//push argument 0        
@0
D=A
@ARG
A=D+M
D=M
@SP
M=D
@SP
AM=M+1
//return
@LCL
D=M
@R14
M=D
@5
D=A
@R14
D=M-D
@R15
M=D
@0
D=A
@ARG
A=D+M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
A=M-1
D=M
@THAT
M=D
@2
D=A
@R14
A=M-D
D=M
@THIS
M=D
@3
D=A
@R14
A=M-D
D=M
@ARG
M=D
@4
D=A
@R14
A=M-D
D=M
@LCL
M=D
@R15
A=M
0;JMP
//label IF_FALSE         // if n>=2, returns fib(n-2)+fib(n-1)
(IF_FALSE)
//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
M=D
@SP
AM=M+1
//push constant 2
@2
D=A
@SP
M=D
@SP
AM=M+1
//sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
//call Main.fibonacci 1  // computes fib(n-2)
@Main.fibonacci$ret0
D=A
@SP
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@1
D=A
@5
D=A-D
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret0)
//push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
M=D
@SP
AM=M+1
//push constant 1
@1
D=A
@SP
M=D
@SP
AM=M+1
//sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
//call Main.fibonacci 1  // computes fib(n-1)
@Main.fibonacci$ret1
D=A
@SP
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@1
D=A
@5
D=A-D
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret1)
//add                    // returns fib(n-1) + fib(n-2)
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
//return
@LCL
D=M
@R14
M=D
@5
D=A
@R14
D=M-D
@R15
M=D
@0
D=A
@ARG
A=D+M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
A=M-1
D=M
@THAT
M=D
@2
D=A
@R14
A=M-D
D=M
@THIS
M=D
@3
D=A
@R14
A=M-D
D=M
@ARG
M=D
@4
D=A
@R14
A=M-D
D=M
@LCL
M=D
@R15
A=M
0;JMP
//function Sys.init 0
(Sys.init)
//push constant 4
@4
D=A
@SP
M=D
@SP
AM=M+1
//call Main.fibonacci 1   // computes the 4'th fibonacci element
@Main.fibonacci$ret2
D=A
@SP
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@1
D=A
@5
D=A-D
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret2)
//label WHILE
(WHILE)
//goto WHILE              // loops infinitely
@WHILE
0;JMP
(INFINITE_LOOP)
@INFINITE_LOOP
0;JMP
