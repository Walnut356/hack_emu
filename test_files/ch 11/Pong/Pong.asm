//init 'stack' pointer
@256
D=A
@SP
M=D
//call Sys.init
@Sys.init$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init$ret0)
// function Array.new 0
(Array.new)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Array.newGT_1
D;JGT
@SP
A=M-1
M=0
(Array.newGT_1)
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Array.new$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Array.new$IF_FALSE0
0;JMP
// label IF_TRUE0
(Array.new$IF_TRUE0)
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(Array.new$IF_FALSE0)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Memory.alloc 1
@Memory.alloc$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Memory.alloc$ret0)
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Array.dispose 0
(Array.dispose)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Memory.deAlloc 1
@Memory.deAlloc$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Memory.deAlloc$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Ball.new 0
(Ball.new)
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Memory.alloc 1
@Memory.alloc$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Memory.alloc$ret1)
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop this 10
@THIS
D=M
@10
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop this 11
@THIS
D=M
@11
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 4
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop this 12
@THIS
D=M
@12
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 5
@ARG
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop this 13
@THIS
D=M
@13
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop this 14
@THIS
D=M
@14
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Ball.show 1
@Ball.show$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.show
0;JMP
(Ball.show$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Ball.dispose 0
(Ball.dispose)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Memory.deAlloc 1
@Memory.deAlloc$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Memory.deAlloc$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Ball.show 0
(Ball.show)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// call Screen.setColor 1
@Screen.setColor$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Ball.draw 1
@Ball.draw$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.draw
0;JMP
(Ball.draw$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Ball.hide 0
(Ball.hide)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Screen.setColor 1
@Screen.setColor$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Ball.draw 1
@Ball.draw$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.draw
0;JMP
(Ball.draw$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Ball.draw 0
(Ball.draw)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 5
@5
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 5
@5
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// call Screen.drawRectangle 4
@Screen.drawRectangle$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@4
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Ball.getLeft 0
(Ball.getLeft)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Ball.getRight 0
(Ball.getRight)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 5
@5
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Ball.setDestination 3
(Ball.setDestination)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop this 3
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.abs 1
@Math.abs$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret0)
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.abs 1
@Math.abs$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret1)
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.setDestinationLT_1
D;JLT
@SP
A=M-1
M=0
(Ball.setDestinationLT_1)
// pop this 7
@THIS
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 7
@THIS
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// if-goto L0
@SP
AM=M-1
D=M
@Ball.setDestination$L0
D;JNE
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.setDestinationLT_2
D;JLT
@SP
A=M-1
M=0
(Ball.setDestinationLT_2)
// pop this 8
@THIS
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.setDestinationLT_3
D;JLT
@SP
A=M-1
M=0
(Ball.setDestinationLT_3)
// pop this 9
@THIS
D=M
@9
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto L1
@Ball.setDestination$L1
0;JMP
// label L0
(Ball.setDestination$L0)
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.setDestinationLT_4
D;JLT
@SP
A=M-1
M=0
(Ball.setDestinationLT_4)
// pop this 8
@THIS
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.setDestinationLT_5
D;JLT
@SP
A=M-1
M=0
(Ball.setDestinationLT_5)
// pop this 9
@THIS
D=M
@9
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label L1
(Ball.setDestination$L1)
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret0)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop this 4
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret1)
// pop this 5
@THIS
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// call Math.multiply 2
@Math.multiply$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret2)
// pop this 6
@THIS
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Ball.move 0
(Ball.move)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Ball.hide 1
@Ball.hide$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.hide
0;JMP
(Ball.hide$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 4
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.moveLT_6
D;JLT
@SP
A=M-1
M=0
(Ball.moveLT_6)
// not
@SP
A=M-1
M=!M
// if-goto L2
@SP
AM=M-1
D=M
@Ball.move$L2
D;JNE
// push this 4
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 5
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop this 4
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto L3
@Ball.move$L3
0;JMP
// label L2
(Ball.move$L2)
// push this 4
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 6
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop this 4
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 9
@THIS
D=M
@9
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// if-goto L4
@SP
AM=M-1
D=M
@Ball.move$L4
D;JNE
// push this 7
@THIS
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// if-goto L6
@SP
AM=M-1
D=M
@Ball.move$L6
D;JNE
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto L7
@Ball.move$L7
0;JMP
// label L6
(Ball.move$L6)
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label L7
(Ball.move$L7)
// goto L5
@Ball.move$L5
0;JMP
// label L4
(Ball.move$L4)
// push this 7
@THIS
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// if-goto L8
@SP
AM=M-1
D=M
@Ball.move$L8
D;JNE
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto L9
@Ball.move$L9
0;JMP
// label L8
(Ball.move$L8)
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label L9
(Ball.move$L9)
// label L5
(Ball.move$L5)
// label L3
(Ball.move$L3)
// push this 8
@THIS
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// if-goto L10
@SP
AM=M-1
D=M
@Ball.move$L10
D;JNE
// push this 7
@THIS
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// if-goto L12
@SP
AM=M-1
D=M
@Ball.move$L12
D;JNE
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto L13
@Ball.move$L13
0;JMP
// label L12
(Ball.move$L12)
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label L13
(Ball.move$L13)
// goto L11
@Ball.move$L11
0;JMP
// label L10
(Ball.move$L10)
// push this 7
@THIS
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// if-goto L14
@SP
AM=M-1
D=M
@Ball.move$L14
D;JNE
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto L15
@Ball.move$L15
0;JMP
// label L14
(Ball.move$L14)
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label L15
(Ball.move$L15)
// label L11
(Ball.move$L11)
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 10
@THIS
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.moveGT_2
D;JGT
@SP
A=M-1
M=0
(Ball.moveGT_2)
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto L16
@SP
AM=M-1
D=M
@Ball.move$L16
D;JNE
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop this 14
@THIS
D=M
@14
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 10
@THIS
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label L16
(Ball.move$L16)
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 11
@THIS
D=M
@11
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.moveLT_7
D;JLT
@SP
A=M-1
M=0
(Ball.moveLT_7)
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto L18
@SP
AM=M-1
D=M
@Ball.move$L18
D;JNE
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop this 14
@THIS
D=M
@14
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 11
@THIS
D=M
@11
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label L18
(Ball.move$L18)
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 12
@THIS
D=M
@12
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.moveGT_3
D;JGT
@SP
A=M-1
M=0
(Ball.moveGT_3)
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto L20
@SP
AM=M-1
D=M
@Ball.move$L20
D;JNE
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop this 14
@THIS
D=M
@14
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 12
@THIS
D=M
@12
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label L20
(Ball.move$L20)
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 13
@THIS
D=M
@13
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.moveLT_8
D;JLT
@SP
A=M-1
M=0
(Ball.moveLT_8)
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto L22
@SP
AM=M-1
D=M
@Ball.move$L22
D;JNE
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop this 14
@THIS
D=M
@14
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 13
@THIS
D=M
@13
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label L22
(Ball.move$L22)
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Ball.show 1
@Ball.show$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.show
0;JMP
(Ball.show$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 14
@THIS
D=M
@14
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Ball.bounce 5
(Ball.bounce)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 10
@10
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.divide 2
@Math.divide$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Math.divide$ret0)
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 10
@10
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.divide 2
@Math.divide$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Math.divide$ret1)
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.bounceEQ_1
D;JEQ
@SP
A=M-1
M=0
(Ball.bounceEQ_1)
// not
@SP
A=M-1
M=!M
// if-goto L24
@SP
AM=M-1
D=M
@Ball.bounce$L24
D;JNE
// push constant 10
@10
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto L25
@Ball.bounce$L25
0;JMP
// label L24
(Ball.bounce$L24)
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.bounceLT_9
D;JLT
@SP
A=M-1
M=0
(Ball.bounceLT_9)
// not
@SP
A=M-1
M=!M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.bounceEQ_2
D;JEQ
@SP
A=M-1
M=0
(Ball.bounceEQ_2)
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.bounceLT_10
D;JLT
@SP
A=M-1
M=0
(Ball.bounceLT_10)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// neg
@SP
A=M-1
M=-M
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.bounceEQ_3
D;JEQ
@SP
A=M-1
M=0
(Ball.bounceEQ_3)
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// not
@SP
A=M-1
M=!M
// if-goto L26
@SP
AM=M-1
D=M
@Ball.bounce$L26
D;JNE
// push constant 20
@20
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto L27
@Ball.bounce$L27
0;JMP
// label L26
(Ball.bounce$L26)
// push constant 5
@5
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label L27
(Ball.bounce$L27)
// label L25
(Ball.bounce$L25)
// push this 14
@THIS
D=M
@14
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.bounceEQ_4
D;JEQ
@SP
A=M-1
M=0
(Ball.bounceEQ_4)
// not
@SP
A=M-1
M=!M
// if-goto L28
@SP
AM=M-1
D=M
@Ball.bounce$L28
D;JNE
// push constant 506
@506
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 50
@50
D=A
@SP
A=M
M=D
@SP
AM=M+1
// neg
@SP
A=M-1
M=-M
// call Math.multiply 2
@Math.multiply$ret3
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret3)
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.divide 2
@Math.divide$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Math.divide$ret2)
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret4
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret4)
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto L29
@Ball.bounce$L29
0;JMP
// label L28
(Ball.bounce$L28)
// push this 14
@THIS
D=M
@14
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.bounceEQ_5
D;JEQ
@SP
A=M-1
M=0
(Ball.bounceEQ_5)
// not
@SP
A=M-1
M=!M
// if-goto L30
@SP
AM=M-1
D=M
@Ball.bounce$L30
D;JNE
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 50
@50
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret5
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret5)
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.divide 2
@Math.divide$ret3
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Math.divide$ret3)
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret6
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret6)
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto L31
@Ball.bounce$L31
0;JMP
// label L30
(Ball.bounce$L30)
// push this 14
@THIS
D=M
@14
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Ball.bounceEQ_6
D;JEQ
@SP
A=M-1
M=0
(Ball.bounceEQ_6)
// not
@SP
A=M-1
M=!M
// if-goto L32
@SP
AM=M-1
D=M
@Ball.bounce$L32
D;JNE
// push constant 250
@250
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 25
@25
D=A
@SP
A=M
M=D
@SP
AM=M+1
// neg
@SP
A=M-1
M=-M
// call Math.multiply 2
@Math.multiply$ret7
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret7)
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.divide 2
@Math.divide$ret4
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Math.divide$ret4)
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret8
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret8)
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto L33
@Ball.bounce$L33
0;JMP
// label L32
(Ball.bounce$L32)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 25
@25
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret9
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret9)
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.divide 2
@Math.divide$ret5
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Math.divide$ret5)
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret10
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret10)
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label L33
(Ball.bounce$L33)
// label L31
(Ball.bounce$L31)
// label L29
(Ball.bounce$L29)
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Ball.setDestination 3
@Ball.setDestination$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@3
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.setDestination
0;JMP
(Ball.setDestination$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Bat.new 0
(Bat.new)
// push constant 5
@5
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Memory.alloc 1
@Memory.alloc$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Memory.alloc$ret2)
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop this 3
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop this 4
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Bat.show 1
@Bat.show$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.show
0;JMP
(Bat.show$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Bat.dispose 0
(Bat.dispose)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Memory.deAlloc 1
@Memory.deAlloc$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Memory.deAlloc$ret2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Bat.show 0
(Bat.show)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// call Screen.setColor 1
@Screen.setColor$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Bat.draw 1
@Bat.draw$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.draw
0;JMP
(Bat.draw$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Bat.hide 0
(Bat.hide)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Screen.setColor 1
@Screen.setColor$ret3
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Bat.draw 1
@Bat.draw$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.draw
0;JMP
(Bat.draw$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Bat.draw 0
(Bat.draw)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// call Screen.drawRectangle 4
@Screen.drawRectangle$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@4
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Bat.setDirection 0
(Bat.setDirection)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop this 4
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Bat.getLeft 0
(Bat.getLeft)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Bat.getRight 0
(Bat.getRight)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Bat.setWidth 0
(Bat.setWidth)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Bat.hide 1
@Bat.hide$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.hide
0;JMP
(Bat.hide$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Bat.show 1
@Bat.show$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.show
0;JMP
(Bat.show$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Bat.move 0
(Bat.move)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 4
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Bat.moveEQ_7
D;JEQ
@SP
A=M-1
M=0
(Bat.moveEQ_7)
// not
@SP
A=M-1
M=!M
// if-goto L0
@SP
AM=M-1
D=M
@Bat.move$L0
D;JNE
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Bat.moveLT_11
D;JLT
@SP
A=M-1
M=0
(Bat.moveLT_11)
// not
@SP
A=M-1
M=!M
// if-goto L2
@SP
AM=M-1
D=M
@Bat.move$L2
D;JNE
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label L2
(Bat.move$L2)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Screen.setColor 1
@Screen.setColor$ret4
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// call Screen.drawRectangle 4
@Screen.drawRectangle$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@4
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// call Screen.setColor 1
@Screen.setColor$ret5
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret5)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// call Screen.drawRectangle 4
@Screen.drawRectangle$ret3
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@4
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto L1
@Bat.move$L1
0;JMP
// label L0
(Bat.move$L0)
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 511
@511
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Bat.moveGT_4
D;JGT
@SP
A=M-1
M=0
(Bat.moveGT_4)
// not
@SP
A=M-1
M=!M
// if-goto L4
@SP
AM=M-1
D=M
@Bat.move$L4
D;JNE
// push constant 511
@511
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label L4
(Bat.move$L4)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Screen.setColor 1
@Screen.setColor$ret6
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret6)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// call Screen.drawRectangle 4
@Screen.drawRectangle$ret4
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@4
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// call Screen.setColor 1
@Screen.setColor$ret7
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret7)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// call Screen.drawRectangle 4
@Screen.drawRectangle$ret5
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@4
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret5)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label L1
(Bat.move$L1)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Keyboard.init 0
(Keyboard.init)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Keyboard.keyPressed 0
(Keyboard.keyPressed)
// push constant 24576
@24576
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Memory.peek 1
@Memory.peek$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.peek
0;JMP
(Memory.peek$ret0)
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Keyboard.readChar 2
(Keyboard.readChar)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.printChar 1
@Output.printChar$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Output.printChar$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label WHILE_EXP0
(Keyboard.readChar$WHILE_EXP0)
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Keyboard.readCharEQ_8
D;JEQ
@SP
A=M-1
M=0
(Keyboard.readCharEQ_8)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Keyboard.readCharGT_5
D;JGT
@SP
A=M-1
M=0
(Keyboard.readCharGT_5)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Keyboard.readChar$WHILE_END0
D;JNE
// call Keyboard.keyPressed 0
@Keyboard.keyPressed$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(Keyboard.keyPressed$ret0)
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Keyboard.readCharGT_6
D;JGT
@SP
A=M-1
M=0
(Keyboard.readCharGT_6)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Keyboard.readChar$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Keyboard.readChar$IF_FALSE0
0;JMP
// label IF_TRUE0
(Keyboard.readChar$IF_TRUE0)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0
(Keyboard.readChar$IF_FALSE0)
// goto WHILE_EXP0
@Keyboard.readChar$WHILE_EXP0
0;JMP
// label WHILE_END0
(Keyboard.readChar$WHILE_END0)
// call String.backSpace 0
@String.backSpace$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.backSpace
0;JMP
(String.backSpace$ret0)
// call Output.printChar 1
@Output.printChar$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Output.printChar$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Output.printChar 1
@Output.printChar$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Output.printChar$ret2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Keyboard.readLine 5
(Keyboard.readLine)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 80
@80
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.new 1
@String.new$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(String.new$ret0)
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Output.printString 1
@Output.printString$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Output.printString$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call String.newLine 0
@String.newLine$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.newLine
0;JMP
(String.newLine$ret0)
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call String.backSpace 0
@String.backSpace$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.backSpace
0;JMP
(String.backSpace$ret1)
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0
(Keyboard.readLine$WHILE_EXP0)
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Keyboard.readLine$WHILE_END0
D;JNE
// call Keyboard.readChar 0
@Keyboard.readChar$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.readChar
0;JMP
(Keyboard.readChar$ret0)
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Keyboard.readLineEQ_9
D;JEQ
@SP
A=M-1
M=0
(Keyboard.readLineEQ_9)
// pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Keyboard.readLine$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Keyboard.readLine$IF_FALSE0
0;JMP
// label IF_TRUE0
(Keyboard.readLine$IF_TRUE0)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Keyboard.readLineEQ_10
D;JEQ
@SP
A=M-1
M=0
(Keyboard.readLineEQ_10)
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Keyboard.readLine$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Keyboard.readLine$IF_FALSE1
0;JMP
// label IF_TRUE1
(Keyboard.readLine$IF_TRUE1)
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call String.eraseLastChar 1
@String.eraseLastChar$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.eraseLastChar
0;JMP
(String.eraseLastChar$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto IF_END1
@Keyboard.readLine$IF_END1
0;JMP
// label IF_FALSE1
(Keyboard.readLine$IF_FALSE1)
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret0)
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1
(Keyboard.readLine$IF_END1)
// label IF_FALSE0
(Keyboard.readLine$IF_FALSE0)
// goto WHILE_EXP0
@Keyboard.readLine$WHILE_EXP0
0;JMP
// label WHILE_END0
(Keyboard.readLine$WHILE_END0)
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Keyboard.readInt 2
(Keyboard.readInt)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Keyboard.readLine 1
@Keyboard.readLine$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.readLine
0;JMP
(Keyboard.readLine$ret0)
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call String.intValue 1
@String.intValue$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.intValue
0;JMP
(String.intValue$ret0)
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call String.dispose 1
@String.dispose$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(String.dispose$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Main.main 1
(Main.main)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call PongGame.newInstance 0
@PongGame.newInstance$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.newInstance
0;JMP
(PongGame.newInstance$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call PongGame.getInstance 0
@PongGame.getInstance$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.getInstance
0;JMP
(PongGame.getInstance$ret0)
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call PongGame.run 1
@PongGame.run$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.run
0;JMP
(PongGame.run$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call PongGame.dispose 1
@PongGame.dispose$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.dispose
0;JMP
(PongGame.dispose$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.init 1
(Math.init)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Array.new 1
@Array.new$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Array.new$ret0)
// pop static 1
@SP
AM=M-1
D=M
@Math.1
M=D
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Array.new 1
@Array.new$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Array.new$ret1)
// pop static 0
@SP
AM=M-1
D=M
@Math.0
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0
(Math.init$WHILE_EXP0)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.initLT_12
D;JLT
@SP
A=M-1
M=0
(Math.initLT_12)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.init$WHILE_END0
D;JNE
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0
@Math.init$WHILE_EXP0
0;JMP
// label WHILE_END0
(Math.init$WHILE_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.abs 0
(Math.abs)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.absLT_13
D;JLT
@SP
A=M-1
M=0
(Math.absLT_13)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.abs$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.abs$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.abs$IF_TRUE0)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// neg
@SP
A=M-1
M=-M
// pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0
(Math.abs$IF_FALSE0)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.multiply 5
(Math.multiply)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.multiplyLT_14
D;JLT
@SP
A=M-1
M=0
(Math.multiplyLT_14)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.multiplyGT_7
D;JGT
@SP
A=M-1
M=0
(Math.multiplyGT_7)
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.multiplyGT_8
D;JGT
@SP
A=M-1
M=0
(Math.multiplyGT_8)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.multiplyLT_15
D;JLT
@SP
A=M-1
M=0
(Math.multiplyLT_15)
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.abs 1
@Math.abs$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret2)
// pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.abs 1
@Math.abs$ret3
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret3)
// pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.multiplyLT_16
D;JLT
@SP
A=M-1
M=0
(Math.multiplyLT_16)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.multiply$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.multiply$IF_TRUE0)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0
(Math.multiply$IF_FALSE0)
// label WHILE_EXP0
(Math.multiply$WHILE_EXP0)
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.multiplyLT_17
D;JLT
@SP
A=M-1
M=0
(Math.multiplyLT_17)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.multiply$WHILE_END0
D;JNE
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.multiplyEQ_11
D;JEQ
@SP
A=M-1
M=0
(Math.multiplyEQ_11)
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Math.multiply$IF_FALSE1
0;JMP
// label IF_TRUE1
(Math.multiply$IF_TRUE1)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1
(Math.multiply$IF_FALSE1)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0
@Math.multiply$WHILE_EXP0
0;JMP
// label WHILE_END0
(Math.multiply$WHILE_END0)
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE2
D;JNE
// goto IF_FALSE2
@Math.multiply$IF_FALSE2
0;JMP
// label IF_TRUE2
(Math.multiply$IF_TRUE2)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// neg
@SP
A=M-1
M=-M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2
(Math.multiply$IF_FALSE2)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.divide 4
(Math.divide)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.divideEQ_12
D;JEQ
@SP
A=M-1
M=0
(Math.divideEQ_12)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.divide$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.divide$IF_TRUE0)
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(Math.divide$IF_FALSE0)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.divideLT_18
D;JLT
@SP
A=M-1
M=0
(Math.divideLT_18)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.divideGT_9
D;JGT
@SP
A=M-1
M=0
(Math.divideGT_9)
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.divideGT_10
D;JGT
@SP
A=M-1
M=0
(Math.divideGT_10)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.divideLT_19
D;JLT
@SP
A=M-1
M=0
(Math.divideLT_19)
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.abs 1
@Math.abs$ret4
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.abs 1
@Math.abs$ret5
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret5)
// pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0
(Math.divide$WHILE_EXP0)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.divideLT_20
D;JLT
@SP
A=M-1
M=0
(Math.divideLT_20)
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.divide$WHILE_END0
D;JNE
// push constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.divideLT_21
D;JLT
@SP
A=M-1
M=0
(Math.divideLT_21)
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Math.divide$IF_FALSE1
0;JMP
// label IF_TRUE1
(Math.divide$IF_TRUE1)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.divideGT_11
D;JGT
@SP
A=M-1
M=0
(Math.divideGT_11)
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE2
D;JNE
// goto IF_FALSE2
@Math.divide$IF_FALSE2
0;JMP
// label IF_TRUE2
(Math.divide$IF_TRUE2)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2
(Math.divide$IF_FALSE2)
// label IF_FALSE1
(Math.divide$IF_FALSE1)
// goto WHILE_EXP0
@Math.divide$WHILE_EXP0
0;JMP
// label WHILE_END0
(Math.divide$WHILE_END0)
// label WHILE_EXP1
(Math.divide$WHILE_EXP1)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.divideGT_12
D;JGT
@SP
A=M-1
M=0
(Math.divideGT_12)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
AM=M-1
D=M
@Math.divide$WHILE_END1
D;JNE
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.divideGT_13
D;JGT
@SP
A=M-1
M=0
(Math.divideGT_13)
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE3
D;JNE
// goto IF_FALSE3
@Math.divide$IF_FALSE3
0;JMP
// label IF_TRUE3
(Math.divide$IF_TRUE3)
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE3
(Math.divide$IF_FALSE3)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1
@Math.divide$WHILE_EXP1
0;JMP
// label WHILE_END1
(Math.divide$WHILE_END1)
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// if-goto IF_TRUE4
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE4
D;JNE
// goto IF_FALSE4
@Math.divide$IF_FALSE4
0;JMP
// label IF_TRUE4
(Math.divide$IF_TRUE4)
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// neg
@SP
A=M-1
M=-M
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE4
(Math.divide$IF_FALSE4)
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.sqrt 4
(Math.sqrt)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.sqrtLT_22
D;JLT
@SP
A=M-1
M=0
(Math.sqrtLT_22)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.sqrt$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.sqrt$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.sqrt$IF_TRUE0)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(Math.sqrt$IF_FALSE0)
// push constant 7
@7
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0
(Math.sqrt$WHILE_EXP0)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.sqrtGT_14
D;JGT
@SP
A=M-1
M=0
(Math.sqrtGT_14)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.sqrt$WHILE_END0
D;JNE
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret11
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret11)
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.sqrtGT_15
D;JGT
@SP
A=M-1
M=0
(Math.sqrtGT_15)
// not
@SP
A=M-1
M=!M
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.sqrtLT_23
D;JLT
@SP
A=M-1
M=0
(Math.sqrtLT_23)
// not
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Math.sqrt$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Math.sqrt$IF_FALSE1
0;JMP
// label IF_TRUE1
(Math.sqrt$IF_TRUE1)
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1
(Math.sqrt$IF_FALSE1)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0
@Math.sqrt$WHILE_EXP0
0;JMP
// label WHILE_END0
(Math.sqrt$WHILE_END0)
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.max 0
(Math.max)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.maxGT_16
D;JGT
@SP
A=M-1
M=0
(Math.maxGT_16)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.max$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.max$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.max$IF_TRUE0)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0
(Math.max$IF_FALSE0)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.min 0
(Math.min)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Math.minLT_24
D;JLT
@SP
A=M-1
M=0
(Math.minLT_24)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.min$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Math.min$IF_FALSE0
0;JMP
// label IF_TRUE0
(Math.min$IF_TRUE0)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0
(Math.min$IF_FALSE0)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.init 0
(Memory.init)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop static 0
@SP
AM=M-1
D=M
@Memory.0
M=D
// push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 14334
@14334
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 2049
@2049
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 2050
@2050
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.peek 0
(Memory.peek)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.poke 0
(Memory.poke)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.alloc 1
(Memory.alloc)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Memory.allocLT_25
D;JLT
@SP
A=M-1
M=0
(Memory.allocLT_25)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Memory.alloc$IF_FALSE0
0;JMP
// label IF_TRUE0
(Memory.alloc$IF_TRUE0)
// push constant 5
@5
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret3
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(Memory.alloc$IF_FALSE0)
// push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0
(Memory.alloc$WHILE_EXP0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Memory.allocLT_26
D;JLT
@SP
A=M-1
M=0
(Memory.allocLT_26)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Memory.alloc$WHILE_END0
D;JNE
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0
@Memory.alloc$WHILE_EXP0
0;JMP
// label WHILE_END0
(Memory.alloc$WHILE_END0)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 16379
@16379
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Memory.allocGT_17
D;JGT
@SP
A=M-1
M=0
(Memory.allocGT_17)
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Memory.alloc$IF_FALSE1
0;JMP
// label IF_TRUE1
(Memory.alloc$IF_TRUE1)
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret4
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE1
(Memory.alloc$IF_FALSE1)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Memory.allocGT_18
D;JGT
@SP
A=M-1
M=0
(Memory.allocGT_18)
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE2
D;JNE
// goto IF_FALSE2
@Memory.alloc$IF_FALSE2
0;JMP
// label IF_TRUE2
(Memory.alloc$IF_TRUE2)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Memory.allocEQ_13
D;JEQ
@SP
A=M-1
M=0
(Memory.allocEQ_13)
// if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE3
D;JNE
// goto IF_FALSE3
@Memory.alloc$IF_FALSE3
0;JMP
// label IF_TRUE3
(Memory.alloc$IF_TRUE3)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END3
@Memory.alloc$IF_END3
0;JMP
// label IF_FALSE3
(Memory.alloc$IF_FALSE3)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END3
(Memory.alloc$IF_END3)
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2
(Memory.alloc$IF_FALSE2)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.deAlloc 2
(Memory.deAlloc)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Memory.deAllocEQ_14
D;JEQ
@SP
A=M-1
M=0
(Memory.deAllocEQ_14)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Memory.deAlloc$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Memory.deAlloc$IF_FALSE0
0;JMP
// label IF_TRUE0
(Memory.deAlloc$IF_TRUE0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0
@Memory.deAlloc$IF_END0
0;JMP
// label IF_FALSE0
(Memory.deAlloc$IF_FALSE0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Memory.deAllocEQ_15
D;JEQ
@SP
A=M-1
M=0
(Memory.deAllocEQ_15)
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Memory.deAlloc$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Memory.deAlloc$IF_FALSE1
0;JMP
// label IF_TRUE1
(Memory.deAlloc$IF_TRUE1)
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1
@Memory.deAlloc$IF_END1
0;JMP
// label IF_FALSE1
(Memory.deAlloc$IF_FALSE1)
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1
(Memory.deAlloc$IF_END1)
// label IF_END0
(Memory.deAlloc$IF_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.init 0
(Output.init)
// push constant 16384
@16384
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop static 4
@SP
AM=M-1
D=M
@Output.4
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// pop static 2
@SP
AM=M-1
D=M
@Output.2
M=D
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop static 1
@SP
AM=M-1
D=M
@Output.1
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop static 0
@SP
AM=M-1
D=M
@Output.0
M=D
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.new 1
@String.new$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(String.new$ret1)
// pop static 3
@SP
AM=M-1
D=M
@Output.3
M=D
// call Output.initMap 0
@Output.initMap$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.initMap
0;JMP
(Output.initMap$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call Output.createShiftedMap 0
@Output.createShiftedMap$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.createShiftedMap
0;JMP
(Output.createShiftedMap$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.initMap 0
(Output.initMap)
// push constant 127
@127
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Array.new 1
@Array.new$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Array.new$ret2)
// pop static 5
@SP
AM=M-1
D=M
@Output.5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 33
@33
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 34
@34
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 54
@54
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 54
@54
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 20
@20
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret3
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 35
@35
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 18
@18
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 18
@18
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 18
@18
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 18
@18
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 18
@18
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 18
@18
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret4
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 36
@36
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret5
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret5)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 37
@37
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 35
@35
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 49
@49
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret6
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret6)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 38
@38
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 54
@54
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 54
@54
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret7
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret7)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 39
@39
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret8
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret8)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 40
@40
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret9
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret9)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 41
@41
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret10
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret10)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 42
@42
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret11
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret11)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 43
@43
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret12
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret12)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 44
@44
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret13
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret13)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 45
@45
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret14
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret14)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 46
@46
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret15
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret15)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 47
@47
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret16
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret16)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret17
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret17)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 49
@49
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 14
@14
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret18
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret18)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 50
@50
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret19
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret19)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 28
@28
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret20
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret20)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 52
@52
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 28
@28
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 26
@26
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 25
@25
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 60
@60
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret21
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret21)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 53
@53
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 31
@31
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret22
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret22)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 54
@54
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 28
@28
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 31
@31
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret23
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret23)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 55
@55
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 49
@49
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret24
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret24)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 56
@56
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret25
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret25)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 57
@57
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 62
@62
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 14
@14
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret26
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret26)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 58
@58
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret27
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret27)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 59
@59
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret28
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret28)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 60
@60
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret29
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret29)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 61
@61
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret30
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret30)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 62
@62
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret31
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret31)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 64
@64
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 59
@59
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 59
@59
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 59
@59
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret32
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret32)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret33
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret33)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 65
@65
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret34
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret34)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 66
@66
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 31
@31
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 31
@31
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 31
@31
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret35
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret35)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 67
@67
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 28
@28
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 54
@54
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 35
@35
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 35
@35
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 54
@54
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 28
@28
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret36
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret36)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 68
@68
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret37
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret37)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 69
@69
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 35
@35
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 11
@11
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 11
@11
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 35
@35
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret38
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret38)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 70
@70
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 35
@35
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 11
@11
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 11
@11
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret39
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret39)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 71
@71
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 28
@28
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 54
@54
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 35
@35
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 59
@59
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 54
@54
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 44
@44
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret40
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret40)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 72
@72
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret41
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret41)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 73
@73
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret42
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret42)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 74
@74
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 60
@60
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 14
@14
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret43
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret43)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 75
@75
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret44
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret44)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 76
@76
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 35
@35
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret45
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret45)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 77
@77
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 33
@33
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret46
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret46)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 78
@78
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 55
@55
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 55
@55
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 59
@59
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 59
@59
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret47
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret47)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 79
@79
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret48
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret48)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 80
@80
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 31
@31
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 31
@31
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret49
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret49)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 81
@81
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 59
@59
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret50
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret50)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 82
@82
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 31
@31
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 31
@31
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret51
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret51)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 83
@83
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 28
@28
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret52
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret52)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 84
@84
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 45
@45
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret53
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret53)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 85
@85
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret54
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret54)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 86
@86
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret55
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret55)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 87
@87
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 18
@18
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret56
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret56)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 88
@88
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret57
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret57)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 89
@89
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret58
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret58)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 90
@90
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 49
@49
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 35
@35
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret59
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret59)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 91
@91
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret60
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret60)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 92
@92
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret61
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret61)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 93
@93
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret62
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret62)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 94
@94
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 8
@8
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 28
@28
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 54
@54
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret63
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret63)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 95
@95
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret64
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret64)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 96
@96
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret65
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret65)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 97
@97
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 14
@14
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 54
@54
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret66
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret66)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 98
@98
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret67
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret67)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 99
@99
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret68
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret68)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 100
@100
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 60
@60
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 54
@54
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret69
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret69)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 101
@101
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret70
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret70)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 102
@102
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 28
@28
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 54
@54
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 38
@38
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret71
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret71)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 103
@103
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 62
@62
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret72
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret72)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 104
@104
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 55
@55
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret73
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret73)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 105
@105
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 14
@14
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret74
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret74)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 106
@106
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 56
@56
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret75
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret75)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 107
@107
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret76
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret76)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 108
@108
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 14
@14
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret77
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret77)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 109
@109
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 29
@29
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 43
@43
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 43
@43
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 43
@43
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 43
@43
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret78
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret78)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 110
@110
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 29
@29
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret79
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret79)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 111
@111
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret80
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret80)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 112
@112
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 31
@31
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret81
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret81)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 113
@113
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 62
@62
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret82
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret82)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 114
@114
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 29
@29
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 55
@55
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 7
@7
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret83
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret83)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 115
@115
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret84
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret84)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 116
@116
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 54
@54
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 28
@28
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret85
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret85)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 117
@117
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 54
@54
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret86
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret86)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 118
@118
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret87
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret87)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 119
@119
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 18
@18
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret88
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret88)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 120
@120
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 30
@30
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret89
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret89)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 121
@121
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 62
@62
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 24
@24
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret90
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret90)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 122
@122
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 51
@51
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret91
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret91)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 123
@123
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 56
@56
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 7
@7
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 56
@56
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret92
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret92)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 124
@124
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret93
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret93)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 125
@125
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 7
@7
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 56
@56
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 7
@7
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret94
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret94)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 126
@126
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 38
@38
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 45
@45
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 25
@25
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.create 12
@Output.create$ret95
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@12
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.create$ret95)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.create 1
(Output.create)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 11
@11
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Array.new 1
@Array.new$ret3
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Array.new$ret3)
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 5
@Output.5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 4
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 5
@ARG
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 5
@5
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 6
@ARG
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 7
@ARG
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 7
@7
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 8
@ARG
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 8
@8
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 9
@ARG
D=M
@9
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 9
@9
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 10
@ARG
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 10
@10
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 11
@ARG
D=M
@11
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.createShiftedMap 4
(Output.createShiftedMap)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 127
@127
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Array.new 1
@Array.new$ret4
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Array.new$ret4)
// pop static 6
@SP
AM=M-1
D=M
@Output.6
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0
(Output.createShiftedMap$WHILE_EXP0)
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 127
@127
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.createShiftedMapLT_27
D;JLT
@SP
A=M-1
M=0
(Output.createShiftedMapLT_27)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Output.createShiftedMap$WHILE_END0
D;JNE
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 5
@Output.5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 11
@11
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Array.new 1
@Array.new$ret5
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Array.new$ret5)
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 6
@Output.6
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1
(Output.createShiftedMap$WHILE_EXP1)
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 11
@11
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.createShiftedMapLT_28
D;JLT
@SP
A=M-1
M=0
(Output.createShiftedMapLT_28)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
AM=M-1
D=M
@Output.createShiftedMap$WHILE_END1
D;JNE
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 256
@256
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret12
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret12)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1
@Output.createShiftedMap$WHILE_EXP1
0;JMP
// label WHILE_END1
(Output.createShiftedMap$WHILE_END1)
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.createShiftedMapEQ_16
D;JEQ
@SP
A=M-1
M=0
(Output.createShiftedMapEQ_16)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Output.createShiftedMap$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Output.createShiftedMap$IF_FALSE0
0;JMP
// label IF_TRUE0
(Output.createShiftedMap$IF_TRUE0)
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0
@Output.createShiftedMap$IF_END0
0;JMP
// label IF_FALSE0
(Output.createShiftedMap$IF_FALSE0)
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0
(Output.createShiftedMap$IF_END0)
// goto WHILE_EXP0
@Output.createShiftedMap$WHILE_EXP0
0;JMP
// label WHILE_END0
(Output.createShiftedMap$WHILE_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.getMap 1
(Output.getMap)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.getMapLT_29
D;JLT
@SP
A=M-1
M=0
(Output.getMapLT_29)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 126
@126
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.getMapGT_19
D;JGT
@SP
A=M-1
M=0
(Output.getMapGT_19)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Output.getMap$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Output.getMap$IF_FALSE0
0;JMP
// label IF_TRUE0
(Output.getMap$IF_TRUE0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0
(Output.getMap$IF_FALSE0)
// push static 2
@Output.2
D=M
@SP
A=M
M=D
@SP
AM=M+1
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Output.getMap$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Output.getMap$IF_FALSE1
0;JMP
// label IF_TRUE1
(Output.getMap$IF_TRUE1)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 5
@Output.5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1
@Output.getMap$IF_END1
0;JMP
// label IF_FALSE1
(Output.getMap$IF_FALSE1)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 6
@Output.6
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1
(Output.getMap$IF_END1)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.drawChar 4
(Output.drawChar)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Output.getMap 1
@Output.getMap$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.getMap
0;JMP
(Output.getMap$ret0)
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push static 1
@Output.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0
(Output.drawChar$WHILE_EXP0)
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 11
@11
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.drawCharLT_30
D;JLT
@SP
A=M-1
M=0
(Output.drawCharLT_30)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Output.drawChar$WHILE_END0
D;JNE
// push static 2
@Output.2
D=M
@SP
A=M
M=D
@SP
AM=M+1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Output.drawChar$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Output.drawChar$IF_FALSE0
0;JMP
// label IF_TRUE0
(Output.drawChar$IF_TRUE0)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 4
@Output.4
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 256
@256
D=A
@SP
A=M
M=D
@SP
AM=M+1
// neg
@SP
A=M-1
M=-M
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0
@Output.drawChar$IF_END0
0;JMP
// label IF_FALSE0
(Output.drawChar$IF_FALSE0)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 4
@Output.4
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 255
@255
D=A
@SP
A=M
M=D
@SP
AM=M+1
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0
(Output.drawChar$IF_END0)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 4
@Output.4
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0
@Output.drawChar$WHILE_EXP0
0;JMP
// label WHILE_END0
(Output.drawChar$WHILE_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.moveCursor 0
(Output.moveCursor)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.moveCursorLT_31
D;JLT
@SP
A=M-1
M=0
(Output.moveCursorLT_31)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 22
@22
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.moveCursorGT_20
D;JGT
@SP
A=M-1
M=0
(Output.moveCursorGT_20)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.moveCursorLT_32
D;JLT
@SP
A=M-1
M=0
(Output.moveCursorLT_32)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 63
@63
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.moveCursorGT_21
D;JGT
@SP
A=M-1
M=0
(Output.moveCursorGT_21)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Output.moveCursor$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Output.moveCursor$IF_FALSE0
0;JMP
// label IF_TRUE0
(Output.moveCursor$IF_TRUE0)
// push constant 20
@20
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret5
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret5)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(Output.moveCursor$IF_FALSE0)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.divide 2
@Math.divide$ret6
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Math.divide$ret6)
// pop static 0
@SP
AM=M-1
D=M
@Output.0
M=D
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 352
@352
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret13
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret13)
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push static 0
@Output.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop static 1
@SP
AM=M-1
D=M
@Output.1
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 0
@Output.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret14
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret14)
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.moveCursorEQ_17
D;JEQ
@SP
A=M-1
M=0
(Output.moveCursorEQ_17)
// pop static 2
@SP
AM=M-1
D=M
@Output.2
M=D
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.drawChar 1
@Output.drawChar$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.drawChar
0;JMP
(Output.drawChar$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.printChar 0
(Output.printChar)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call String.newLine 0
@String.newLine$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.newLine
0;JMP
(String.newLine$ret1)
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.printCharEQ_18
D;JEQ
@SP
A=M-1
M=0
(Output.printCharEQ_18)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Output.printChar$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Output.printChar$IF_FALSE0
0;JMP
// label IF_TRUE0
(Output.printChar$IF_TRUE0)
// call Output.println 0
@Output.println$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Output.println$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto IF_END0
@Output.printChar$IF_END0
0;JMP
// label IF_FALSE0
(Output.printChar$IF_FALSE0)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call String.backSpace 0
@String.backSpace$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.backSpace
0;JMP
(String.backSpace$ret2)
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.printCharEQ_19
D;JEQ
@SP
A=M-1
M=0
(Output.printCharEQ_19)
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Output.printChar$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Output.printChar$IF_FALSE1
0;JMP
// label IF_TRUE1
(Output.printChar$IF_TRUE1)
// call Output.backSpace 0
@Output.backSpace$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.backSpace
0;JMP
(Output.backSpace$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto IF_END1
@Output.printChar$IF_END1
0;JMP
// label IF_FALSE1
(Output.printChar$IF_FALSE1)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Output.drawChar 1
@Output.drawChar$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.drawChar
0;JMP
(Output.drawChar$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push static 2
@Output.2
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Output.printChar$IF_TRUE2
D;JNE
// goto IF_FALSE2
@Output.printChar$IF_FALSE2
0;JMP
// label IF_TRUE2
(Output.printChar$IF_TRUE2)
// push static 0
@Output.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop static 0
@SP
AM=M-1
D=M
@Output.0
M=D
// push static 1
@Output.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop static 1
@SP
AM=M-1
D=M
@Output.1
M=D
// label IF_FALSE2
(Output.printChar$IF_FALSE2)
// push static 0
@Output.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.printCharEQ_20
D;JEQ
@SP
A=M-1
M=0
(Output.printCharEQ_20)
// if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Output.printChar$IF_TRUE3
D;JNE
// goto IF_FALSE3
@Output.printChar$IF_FALSE3
0;JMP
// label IF_TRUE3
(Output.printChar$IF_TRUE3)
// call Output.println 0
@Output.println$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Output.println$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto IF_END3
@Output.printChar$IF_END3
0;JMP
// label IF_FALSE3
(Output.printChar$IF_FALSE3)
// push static 2
@Output.2
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// pop static 2
@SP
AM=M-1
D=M
@Output.2
M=D
// label IF_END3
(Output.printChar$IF_END3)
// label IF_END1
(Output.printChar$IF_END1)
// label IF_END0
(Output.printChar$IF_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.printString 2
(Output.printString)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call String.length 1
@String.length$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.length
0;JMP
(String.length$ret0)
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0
(Output.printString$WHILE_EXP0)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.printStringLT_33
D;JLT
@SP
A=M-1
M=0
(Output.printStringLT_33)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Output.printString$WHILE_END0
D;JNE
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call String.charAt 2
@String.charAt$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.charAt
0;JMP
(String.charAt$ret0)
// call Output.printChar 1
@Output.printChar$ret3
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Output.printChar$ret3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0
@Output.printString$WHILE_EXP0
0;JMP
// label WHILE_END0
(Output.printString$WHILE_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.printInt 0
(Output.printInt)
// push static 3
@Output.3
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call String.setInt 2
@String.setInt$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.setInt
0;JMP
(String.setInt$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push static 3
@Output.3
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Output.printString 1
@Output.printString$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Output.printString$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.println 0
(Output.println)
// push static 1
@Output.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 352
@352
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push static 0
@Output.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop static 1
@SP
AM=M-1
D=M
@Output.1
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop static 0
@SP
AM=M-1
D=M
@Output.0
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// pop static 2
@SP
AM=M-1
D=M
@Output.2
M=D
// push static 1
@Output.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 8128
@8128
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.printlnEQ_21
D;JEQ
@SP
A=M-1
M=0
(Output.printlnEQ_21)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Output.println$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Output.println$IF_FALSE0
0;JMP
// label IF_TRUE0
(Output.println$IF_TRUE0)
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop static 1
@SP
AM=M-1
D=M
@Output.1
M=D
// label IF_FALSE0
(Output.println$IF_FALSE0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.backSpace 0
(Output.backSpace)
// push static 2
@Output.2
D=M
@SP
A=M
M=D
@SP
AM=M+1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Output.backSpace$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Output.backSpace$IF_FALSE0
0;JMP
// label IF_TRUE0
(Output.backSpace$IF_TRUE0)
// push static 0
@Output.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.backSpaceGT_22
D;JGT
@SP
A=M-1
M=0
(Output.backSpaceGT_22)
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Output.backSpace$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Output.backSpace$IF_FALSE1
0;JMP
// label IF_TRUE1
(Output.backSpace$IF_TRUE1)
// push static 0
@Output.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop static 0
@SP
AM=M-1
D=M
@Output.0
M=D
// push static 1
@Output.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop static 1
@SP
AM=M-1
D=M
@Output.1
M=D
// goto IF_END1
@Output.backSpace$IF_END1
0;JMP
// label IF_FALSE1
(Output.backSpace$IF_FALSE1)
// push constant 31
@31
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop static 0
@SP
AM=M-1
D=M
@Output.0
M=D
// push static 1
@Output.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Output.backSpaceEQ_22
D;JEQ
@SP
A=M-1
M=0
(Output.backSpaceEQ_22)
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Output.backSpace$IF_TRUE2
D;JNE
// goto IF_FALSE2
@Output.backSpace$IF_FALSE2
0;JMP
// label IF_TRUE2
(Output.backSpace$IF_TRUE2)
// push constant 8128
@8128
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop static 1
@SP
AM=M-1
D=M
@Output.1
M=D
// label IF_FALSE2
(Output.backSpace$IF_FALSE2)
// push static 1
@Output.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 321
@321
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop static 1
@SP
AM=M-1
D=M
@Output.1
M=D
// label IF_END1
(Output.backSpace$IF_END1)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop static 2
@SP
AM=M-1
D=M
@Output.2
M=D
// goto IF_END0
@Output.backSpace$IF_END0
0;JMP
// label IF_FALSE0
(Output.backSpace$IF_FALSE0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// pop static 2
@SP
AM=M-1
D=M
@Output.2
M=D
// label IF_END0
(Output.backSpace$IF_END0)
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.drawChar 1
@Output.drawChar$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.drawChar
0;JMP
(Output.drawChar$ret2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function PongGame.new 0
(PongGame.new)
// push constant 7
@7
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Memory.alloc 1
@Memory.alloc$ret3
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Memory.alloc$ret3)
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// call Screen.clearScreen 0
@Screen.clearScreen$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.clearScreen
0;JMP
(Screen.clearScreen$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 50
@50
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop this 6
@THIS
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 230
@230
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 229
@229
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push this 6
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 7
@7
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Bat.new 4
@Bat.new$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@4
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.new
0;JMP
(Bat.new$ret0)
// pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 253
@253
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 222
@222
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 511
@511
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 229
@229
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Ball.new 6
@Ball.new$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.new
0;JMP
(Ball.new$ret0)
// pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 400
@400
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Ball.setDestination 3
@Ball.setDestination$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@3
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.setDestination
0;JMP
(Ball.setDestination$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 238
@238
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 511
@511
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 240
@240
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Screen.drawRectangle 4
@Screen.drawRectangle$ret6
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@4
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret6)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 22
@22
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.moveCursor 2
@Output.moveCursor$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0;JMP
(Output.moveCursor$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 8
@8
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.new 1
@String.new$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(String.new$ret2)
// push constant 83
@83
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret1)
// push constant 99
@99
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret2)
// push constant 111
@111
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret3
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret3)
// push constant 114
@114
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret4
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret4)
// push constant 101
@101
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret5
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret5)
// push constant 58
@58
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret6
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret6)
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret7
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret7)
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret8
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret8)
// call Output.printString 1
@Output.printString$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Output.printString$ret2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop this 3
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop this 4
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop this 5
@THIS
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function PongGame.dispose 0
(PongGame.dispose)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Bat.dispose 1
@Bat.dispose$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.dispose
0;JMP
(Bat.dispose$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Ball.dispose 1
@Ball.dispose$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.dispose
0;JMP
(Ball.dispose$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Memory.deAlloc 1
@Memory.deAlloc$ret3
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Memory.deAlloc$ret3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function PongGame.newInstance 0
(PongGame.newInstance)
// call PongGame.new 0
@PongGame.new$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.new
0;JMP
(PongGame.new$ret0)
// pop static 0
@SP
AM=M-1
D=M
@PongGame.0
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function PongGame.getInstance 0
(PongGame.getInstance)
// push static 0
@PongGame.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function PongGame.run 1
(PongGame.run)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// label L1
(PongGame.run$L1)
// push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto L0
@SP
AM=M-1
D=M
@PongGame.run$L0
D;JNE
// label L3
(PongGame.run$L3)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@PongGame.runEQ_23
D;JEQ
@SP
A=M-1
M=0
(PongGame.runEQ_23)
// push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// not
@SP
A=M-1
M=!M
// if-goto L2
@SP
AM=M-1
D=M
@PongGame.run$L2
D;JNE
// call Keyboard.keyPressed 0
@Keyboard.keyPressed$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(Keyboard.keyPressed$ret1)
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Bat.move 1
@Bat.move$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.move
0;JMP
(Bat.move$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call PongGame.moveBall 1
@PongGame.moveBall$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.moveBall
0;JMP
(PongGame.moveBall$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 50
@50
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.wait 1
@Sys.wait$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Sys.wait$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto L3
@PongGame.run$L3
0;JMP
// label L2
(PongGame.run$L2)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 130
@130
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@PongGame.runEQ_24
D;JEQ
@SP
A=M-1
M=0
(PongGame.runEQ_24)
// not
@SP
A=M-1
M=!M
// if-goto L4
@SP
AM=M-1
D=M
@PongGame.run$L4
D;JNE
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Bat.setDirection 2
@Bat.setDirection$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.setDirection
0;JMP
(Bat.setDirection$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto L5
@PongGame.run$L5
0;JMP
// label L4
(PongGame.run$L4)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 132
@132
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@PongGame.runEQ_25
D;JEQ
@SP
A=M-1
M=0
(PongGame.runEQ_25)
// not
@SP
A=M-1
M=!M
// if-goto L6
@SP
AM=M-1
D=M
@PongGame.run$L6
D;JNE
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Bat.setDirection 2
@Bat.setDirection$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.setDirection
0;JMP
(Bat.setDirection$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto L7
@PongGame.run$L7
0;JMP
// label L6
(PongGame.run$L6)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 140
@140
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@PongGame.runEQ_26
D;JEQ
@SP
A=M-1
M=0
(PongGame.runEQ_26)
// not
@SP
A=M-1
M=!M
// if-goto L8
@SP
AM=M-1
D=M
@PongGame.run$L8
D;JNE
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// pop this 3
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label L8
(PongGame.run$L8)
// label L7
(PongGame.run$L7)
// label L5
(PongGame.run$L5)
// label L11
(PongGame.run$L11)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@PongGame.runEQ_27
D;JEQ
@SP
A=M-1
M=0
(PongGame.runEQ_27)
// not
@SP
A=M-1
M=!M
// push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// not
@SP
A=M-1
M=!M
// if-goto L10
@SP
AM=M-1
D=M
@PongGame.run$L10
D;JNE
// call Keyboard.keyPressed 0
@Keyboard.keyPressed$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(Keyboard.keyPressed$ret2)
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Bat.move 1
@Bat.move$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.move
0;JMP
(Bat.move$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call PongGame.moveBall 1
@PongGame.moveBall$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.moveBall
0;JMP
(PongGame.moveBall$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 50
@50
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.wait 1
@Sys.wait$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Sys.wait$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto L11
@PongGame.run$L11
0;JMP
// label L10
(PongGame.run$L10)
// goto L1
@PongGame.run$L1
0;JMP
// label L0
(PongGame.run$L0)
// push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// if-goto L12
@SP
AM=M-1
D=M
@PongGame.run$L12
D;JNE
// push constant 10
@10
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 27
@27
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.moveCursor 2
@Output.moveCursor$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0;JMP
(Output.moveCursor$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 9
@9
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.new 1
@String.new$ret3
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(String.new$ret3)
// push constant 71
@71
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret9
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret9)
// push constant 97
@97
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret10
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret10)
// push constant 109
@109
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret11
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret11)
// push constant 101
@101
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret12
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret12)
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret13
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret13)
// push constant 79
@79
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret14
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret14)
// push constant 118
@118
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret15
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret15)
// push constant 101
@101
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret16
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret16)
// push constant 114
@114
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret17
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret17)
// call Output.printString 1
@Output.printString$ret3
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Output.printString$ret3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label L12
(PongGame.run$L12)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function PongGame.moveBall 5
(PongGame.moveBall)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Ball.move 1
@Ball.move$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.move
0;JMP
(Ball.move$ret0)
// pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@PongGame.moveBallGT_23
D;JGT
@SP
A=M-1
M=0
(PongGame.moveBallGT_23)
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 5
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@PongGame.moveBallEQ_28
D;JEQ
@SP
A=M-1
M=0
(PongGame.moveBallEQ_28)
// not
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// not
@SP
A=M-1
M=!M
// if-goto L14
@SP
AM=M-1
D=M
@PongGame.moveBall$L14
D;JNE
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop this 5
@THIS
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Bat.getLeft 1
@Bat.getLeft$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.getLeft
0;JMP
(Bat.getLeft$ret0)
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Bat.getRight 1
@Bat.getRight$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.getRight
0;JMP
(Bat.getRight$ret0)
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Ball.getLeft 1
@Ball.getLeft$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.getLeft
0;JMP
(Ball.getLeft$ret0)
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Ball.getRight 1
@Ball.getRight$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.getRight
0;JMP
(Ball.getRight$ret0)
// pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@PongGame.moveBallEQ_29
D;JEQ
@SP
A=M-1
M=0
(PongGame.moveBallEQ_29)
// not
@SP
A=M-1
M=!M
// if-goto L16
@SP
AM=M-1
D=M
@PongGame.moveBall$L16
D;JNE
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@PongGame.moveBallGT_24
D;JGT
@SP
A=M-1
M=0
(PongGame.moveBallGT_24)
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@PongGame.moveBallLT_34
D;JLT
@SP
A=M-1
M=0
(PongGame.moveBallLT_34)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// pop this 3
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto L18
@SP
AM=M-1
D=M
@PongGame.moveBall$L18
D;JNE
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 10
@10
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@PongGame.moveBallLT_35
D;JLT
@SP
A=M-1
M=0
(PongGame.moveBallLT_35)
// not
@SP
A=M-1
M=!M
// if-goto L20
@SP
AM=M-1
D=M
@PongGame.moveBall$L20
D;JNE
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// neg
@SP
A=M-1
M=-M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto L21
@PongGame.moveBall$L21
0;JMP
// label L20
(PongGame.moveBall$L20)
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 10
@10
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@PongGame.moveBallGT_25
D;JGT
@SP
A=M-1
M=0
(PongGame.moveBallGT_25)
// not
@SP
A=M-1
M=!M
// if-goto L22
@SP
AM=M-1
D=M
@PongGame.moveBall$L22
D;JNE
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label L22
(PongGame.moveBall$L22)
// label L21
(PongGame.moveBall$L21)
// push this 6
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop this 6
@THIS
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 6
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Bat.setWidth 2
@Bat.setWidth$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.setWidth
0;JMP
(Bat.setWidth$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 4
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop this 4
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 22
@22
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 7
@7
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Output.moveCursor 2
@Output.moveCursor$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0;JMP
(Output.moveCursor$ret2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push this 4
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Output.printInt 1
@Output.printInt$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printInt
0;JMP
(Output.printInt$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label L18
(PongGame.moveBall$L18)
// label L16
(PongGame.moveBall$L16)
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Ball.bounce 2
@Ball.bounce$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.bounce
0;JMP
(Ball.bounce$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label L14
(PongGame.moveBall$L14)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.init 1
(Screen.init)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push constant 16384
@16384
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop static 1
@SP
AM=M-1
D=M
@Screen.1
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// pop static 2
@SP
AM=M-1
D=M
@Screen.2
M=D
// push constant 17
@17
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Array.new 1
@Array.new$ret6
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Array.new$ret6)
// pop static 0
@SP
AM=M-1
D=M
@Screen.0
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0
(Screen.init$WHILE_EXP0)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.initLT_36
D;JLT
@SP
A=M-1
M=0
(Screen.initLT_36)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Screen.init$WHILE_END0
D;JNE
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0
@Screen.init$WHILE_EXP0
0;JMP
// label WHILE_END0
(Screen.init$WHILE_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.clearScreen 1
(Screen.clearScreen)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// label WHILE_EXP0
(Screen.clearScreen$WHILE_EXP0)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 8192
@8192
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.clearScreenLT_37
D;JLT
@SP
A=M-1
M=0
(Screen.clearScreenLT_37)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Screen.clearScreen$WHILE_END0
D;JNE
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 1
@Screen.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0
@Screen.clearScreen$WHILE_EXP0
0;JMP
// label WHILE_END0
(Screen.clearScreen$WHILE_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.updateLocation 0
(Screen.updateLocation)
// push static 2
@Screen.2
D=M
@SP
A=M
M=D
@SP
AM=M+1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Screen.updateLocation$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Screen.updateLocation$IF_FALSE0
0;JMP
// label IF_TRUE0
(Screen.updateLocation$IF_TRUE0)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 1
@Screen.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 1
@Screen.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0
@Screen.updateLocation$IF_END0
0;JMP
// label IF_FALSE0
(Screen.updateLocation$IF_FALSE0)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 1
@Screen.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 1
@Screen.1
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0
(Screen.updateLocation$IF_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.setColor 0
(Screen.setColor)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop static 2
@SP
AM=M-1
D=M
@Screen.2
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.drawPixel 3
(Screen.drawPixel)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawPixelLT_38
D;JLT
@SP
A=M-1
M=0
(Screen.drawPixelLT_38)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 511
@511
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawPixelGT_26
D;JGT
@SP
A=M-1
M=0
(Screen.drawPixelGT_26)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawPixelLT_39
D;JLT
@SP
A=M-1
M=0
(Screen.drawPixelLT_39)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 255
@255
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawPixelGT_27
D;JGT
@SP
A=M-1
M=0
(Screen.drawPixelGT_27)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Screen.drawPixel$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Screen.drawPixel$IF_FALSE0
0;JMP
// label IF_TRUE0
(Screen.drawPixel$IF_TRUE0)
// push constant 7
@7
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret6
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret6)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(Screen.drawPixel$IF_FALSE0)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.divide 2
@Math.divide$ret7
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Math.divide$ret7)
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret15
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret15)
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret16
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret16)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Screen.updateLocation 2
@Screen.updateLocation$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.updateLocation$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.drawConditional 0
(Screen.drawConditional)
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Screen.drawConditional$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Screen.drawConditional$IF_FALSE0
0;JMP
// label IF_TRUE0
(Screen.drawConditional$IF_TRUE0)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Screen.drawPixel 2
@Screen.drawPixel$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Screen.drawPixel$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto IF_END0
@Screen.drawConditional$IF_END0
0;JMP
// label IF_FALSE0
(Screen.drawConditional$IF_FALSE0)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Screen.drawPixel 2
@Screen.drawPixel$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Screen.drawPixel$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_END0
(Screen.drawConditional$IF_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.drawLine 11
(Screen.drawLine)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawLineLT_40
D;JLT
@SP
A=M-1
M=0
(Screen.drawLineLT_40)
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 511
@511
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawLineGT_28
D;JGT
@SP
A=M-1
M=0
(Screen.drawLineGT_28)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawLineLT_41
D;JLT
@SP
A=M-1
M=0
(Screen.drawLineLT_41)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 255
@255
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawLineGT_29
D;JGT
@SP
A=M-1
M=0
(Screen.drawLineGT_29)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Screen.drawLine$IF_FALSE0
0;JMP
// label IF_TRUE0
(Screen.drawLine$IF_TRUE0)
// push constant 8
@8
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret7
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret7)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(Screen.drawLine$IF_FALSE0)
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// call Math.abs 1
@Math.abs$ret6
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret6)
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// call Math.abs 1
@Math.abs$ret7
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.abs$ret7)
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawLineLT_42
D;JLT
@SP
A=M-1
M=0
(Screen.drawLineLT_42)
// pop local 6
@LCL
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawLineLT_43
D;JLT
@SP
A=M-1
M=0
(Screen.drawLineLT_43)
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawLineLT_44
D;JLT
@SP
A=M-1
M=0
(Screen.drawLineLT_44)
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Screen.drawLine$IF_FALSE1
0;JMP
// label IF_TRUE1
(Screen.drawLine$IF_TRUE1)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop argument 2
@ARG
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop argument 3
@ARG
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1
(Screen.drawLine$IF_FALSE1)
// push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE2
D;JNE
// goto IF_FALSE2
@Screen.drawLine$IF_FALSE2
0;JMP
// label IF_TRUE2
(Screen.drawLine$IF_TRUE2)
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 8
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawLineGT_30
D;JGT
@SP
A=M-1
M=0
(Screen.drawLineGT_30)
// pop local 7
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END2
@Screen.drawLine$IF_END2
0;JMP
// label IF_FALSE2
(Screen.drawLine$IF_FALSE2)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 8
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawLineGT_31
D;JGT
@SP
A=M-1
M=0
(Screen.drawLineGT_31)
// pop local 7
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END2
(Screen.drawLine$IF_END2)
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret17
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret17)
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 5
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret18
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret18)
// pop local 9
@LCL
D=M
@9
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// call Math.multiply 2
@Math.multiply$ret19
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret19)
// pop local 10
@LCL
D=M
@10
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Screen.drawConditional 3
@Screen.drawConditional$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@3
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawConditional
0;JMP
(Screen.drawConditional$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label WHILE_EXP0
(Screen.drawLine$WHILE_EXP0)
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 8
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawLineLT_45
D;JLT
@SP
A=M-1
M=0
(Screen.drawLineLT_45)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Screen.drawLine$WHILE_END0
D;JNE
// push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawLineLT_46
D;JLT
@SP
A=M-1
M=0
(Screen.drawLineLT_46)
// if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE3
D;JNE
// goto IF_FALSE3
@Screen.drawLine$IF_FALSE3
0;JMP
// label IF_TRUE3
(Screen.drawLine$IF_TRUE3)
// push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 9
@LCL
D=M
@9
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 5
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END3
@Screen.drawLine$IF_END3
0;JMP
// label IF_FALSE3
(Screen.drawLine$IF_FALSE3)
// push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 10
@LCL
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 5
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 7
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// if-goto IF_TRUE4
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE4
D;JNE
// goto IF_FALSE4
@Screen.drawLine$IF_FALSE4
0;JMP
// label IF_TRUE4
(Screen.drawLine$IF_TRUE4)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END4
@Screen.drawLine$IF_END4
0;JMP
// label IF_FALSE4
(Screen.drawLine$IF_FALSE4)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END4
(Screen.drawLine$IF_END4)
// label IF_END3
(Screen.drawLine$IF_END3)
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Screen.drawConditional 3
@Screen.drawConditional$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@3
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawConditional
0;JMP
(Screen.drawConditional$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto WHILE_EXP0
@Screen.drawLine$WHILE_EXP0
0;JMP
// label WHILE_END0
(Screen.drawLine$WHILE_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.drawRectangle 9
(Screen.drawRectangle)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawRectangleGT_32
D;JGT
@SP
A=M-1
M=0
(Screen.drawRectangleGT_32)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawRectangleGT_33
D;JGT
@SP
A=M-1
M=0
(Screen.drawRectangleGT_33)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawRectangleLT_47
D;JLT
@SP
A=M-1
M=0
(Screen.drawRectangleLT_47)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 511
@511
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawRectangleGT_34
D;JGT
@SP
A=M-1
M=0
(Screen.drawRectangleGT_34)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawRectangleLT_48
D;JLT
@SP
A=M-1
M=0
(Screen.drawRectangleLT_48)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 255
@255
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawRectangleGT_35
D;JGT
@SP
A=M-1
M=0
(Screen.drawRectangleGT_35)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Screen.drawRectangle$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Screen.drawRectangle$IF_FALSE0
0;JMP
// label IF_TRUE0
(Screen.drawRectangle$IF_TRUE0)
// push constant 9
@9
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret8
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret8)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(Screen.drawRectangle$IF_FALSE0)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.divide 2
@Math.divide$ret8
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Math.divide$ret8)
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret20
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret20)
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 7
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.divide 2
@Math.divide$ret9
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Math.divide$ret9)
// pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret21
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret21)
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 8
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 7
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// not
@SP
A=M-1
M=!M
// pop local 6
@LCL
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 8
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 5
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret22
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret22)
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0
(Screen.drawRectangle$WHILE_EXP0)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawRectangleGT_36
D;JGT
@SP
A=M-1
M=0
(Screen.drawRectangleGT_36)
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Screen.drawRectangle$WHILE_END0
D;JNE
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawRectangleEQ_30
D;JEQ
@SP
A=M-1
M=0
(Screen.drawRectangleEQ_30)
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Screen.drawRectangle$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Screen.drawRectangle$IF_FALSE1
0;JMP
// label IF_TRUE1
(Screen.drawRectangle$IF_TRUE1)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// call Screen.updateLocation 2
@Screen.updateLocation$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.updateLocation$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto IF_END1
@Screen.drawRectangle$IF_END1
0;JMP
// label IF_FALSE1
(Screen.drawRectangle$IF_FALSE1)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Screen.updateLocation 2
@Screen.updateLocation$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.updateLocation$ret2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1
(Screen.drawRectangle$WHILE_EXP1)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawRectangleLT_49
D;JLT
@SP
A=M-1
M=0
(Screen.drawRectangleLT_49)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
AM=M-1
D=M
@Screen.drawRectangle$WHILE_END1
D;JNE
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// neg
@SP
A=M-1
M=-M
// call Screen.updateLocation 2
@Screen.updateLocation$ret3
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.updateLocation$ret3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1
@Screen.drawRectangle$WHILE_EXP1
0;JMP
// label WHILE_END1
(Screen.drawRectangle$WHILE_END1)
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Screen.updateLocation 2
@Screen.updateLocation$ret4
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.updateLocation$ret4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_END1
(Screen.drawRectangle$IF_END1)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0
@Screen.drawRectangle$WHILE_EXP0
0;JMP
// label WHILE_END0
(Screen.drawRectangle$WHILE_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.drawHorizontal 11
(Screen.drawHorizontal)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.min 2
@Math.min$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.min
0;JMP
(Math.min$ret0)
// pop local 7
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.max 2
@Math.max$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.max
0;JMP
(Math.max$ret0)
// pop local 8
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawHorizontalGT_37
D;JGT
@SP
A=M-1
M=0
(Screen.drawHorizontalGT_37)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 256
@256
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawHorizontalLT_50
D;JLT
@SP
A=M-1
M=0
(Screen.drawHorizontalLT_50)
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// push local 7
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 512
@512
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawHorizontalLT_51
D;JLT
@SP
A=M-1
M=0
(Screen.drawHorizontalLT_51)
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// push local 8
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawHorizontalGT_38
D;JGT
@SP
A=M-1
M=0
(Screen.drawHorizontalGT_38)
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Screen.drawHorizontal$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Screen.drawHorizontal$IF_FALSE0
0;JMP
// label IF_TRUE0
(Screen.drawHorizontal$IF_TRUE0)
// push local 7
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.max 2
@Math.max$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.max
0;JMP
(Math.max$ret1)
// pop local 7
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 8
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 511
@511
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.min 2
@Math.min$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.min
0;JMP
(Math.min$ret1)
// pop local 8
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 7
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.divide 2
@Math.divide$ret10
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Math.divide$ret10)
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 7
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret23
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret23)
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 9
@LCL
D=M
@9
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 8
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.divide 2
@Math.divide$ret11
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Math.divide$ret11)
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 8
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret24
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret24)
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 10
@LCL
D=M
@10
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 9
@LCL
D=M
@9
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// not
@SP
A=M-1
M=!M
// pop local 5
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 10
@LCL
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret25
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret25)
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 6
@LCL
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawHorizontalEQ_31
D;JEQ
@SP
A=M-1
M=0
(Screen.drawHorizontalEQ_31)
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Screen.drawHorizontal$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Screen.drawHorizontal$IF_FALSE1
0;JMP
// label IF_TRUE1
(Screen.drawHorizontal$IF_TRUE1)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// call Screen.updateLocation 2
@Screen.updateLocation$ret5
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.updateLocation$ret5)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto IF_END1
@Screen.drawHorizontal$IF_END1
0;JMP
// label IF_FALSE1
(Screen.drawHorizontal$IF_FALSE1)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Screen.updateLocation 2
@Screen.updateLocation$ret6
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.updateLocation$ret6)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0
(Screen.drawHorizontal$WHILE_EXP0)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawHorizontalLT_52
D;JLT
@SP
A=M-1
M=0
(Screen.drawHorizontalLT_52)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Screen.drawHorizontal$WHILE_END0
D;JNE
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// neg
@SP
A=M-1
M=-M
// call Screen.updateLocation 2
@Screen.updateLocation$ret7
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.updateLocation$ret7)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0
@Screen.drawHorizontal$WHILE_EXP0
0;JMP
// label WHILE_END0
(Screen.drawHorizontal$WHILE_END0)
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Screen.updateLocation 2
@Screen.updateLocation$ret8
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.updateLocation$ret8)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_END1
(Screen.drawHorizontal$IF_END1)
// label IF_FALSE0
(Screen.drawHorizontal$IF_FALSE0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.drawSymetric 0
(Screen.drawSymetric)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// call Screen.drawHorizontal 3
@Screen.drawHorizontal$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@3
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawHorizontal$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// call Screen.drawHorizontal 3
@Screen.drawHorizontal$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@3
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawHorizontal$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// call Screen.drawHorizontal 3
@Screen.drawHorizontal$ret2
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@3
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawHorizontal$ret2)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// call Screen.drawHorizontal 3
@Screen.drawHorizontal$ret3
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@3
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawHorizontal$ret3)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.drawCircle 3
(Screen.drawCircle)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawCircleLT_53
D;JLT
@SP
A=M-1
M=0
(Screen.drawCircleLT_53)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 511
@511
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawCircleGT_39
D;JGT
@SP
A=M-1
M=0
(Screen.drawCircleGT_39)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawCircleLT_54
D;JLT
@SP
A=M-1
M=0
(Screen.drawCircleLT_54)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 255
@255
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawCircleGT_40
D;JGT
@SP
A=M-1
M=0
(Screen.drawCircleGT_40)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Screen.drawCircle$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Screen.drawCircle$IF_FALSE0
0;JMP
// label IF_TRUE0
(Screen.drawCircle$IF_TRUE0)
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret9
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret9)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(Screen.drawCircle$IF_FALSE0)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawCircleLT_55
D;JLT
@SP
A=M-1
M=0
(Screen.drawCircleLT_55)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 511
@511
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawCircleGT_41
D;JGT
@SP
A=M-1
M=0
(Screen.drawCircleGT_41)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawCircleLT_56
D;JLT
@SP
A=M-1
M=0
(Screen.drawCircleLT_56)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 255
@255
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawCircleGT_42
D;JGT
@SP
A=M-1
M=0
(Screen.drawCircleGT_42)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Screen.drawCircle$IF_TRUE1
D;JNE
// goto IF_FALSE1
@Screen.drawCircle$IF_FALSE1
0;JMP
// label IF_TRUE1
(Screen.drawCircle$IF_TRUE1)
// push constant 13
@13
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret10
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret10)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE1
(Screen.drawCircle$IF_FALSE1)
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Screen.drawSymetric 4
@Screen.drawSymetric$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@4
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawSymetric
0;JMP
(Screen.drawSymetric$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label WHILE_EXP0
(Screen.drawCircle$WHILE_EXP0)
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawCircleGT_43
D;JGT
@SP
A=M-1
M=0
(Screen.drawCircleGT_43)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Screen.drawCircle$WHILE_END0
D;JNE
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Screen.drawCircleLT_57
D;JLT
@SP
A=M-1
M=0
(Screen.drawCircleLT_57)
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Screen.drawCircle$IF_TRUE2
D;JNE
// goto IF_FALSE2
@Screen.drawCircle$IF_FALSE2
0;JMP
// label IF_TRUE2
(Screen.drawCircle$IF_TRUE2)
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret26
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret26)
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END2
@Screen.drawCircle$IF_END2
0;JMP
// label IF_FALSE2
(Screen.drawCircle$IF_FALSE2)
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// call Math.multiply 2
@Math.multiply$ret27
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret27)
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 5
@5
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END2
(Screen.drawCircle$IF_END2)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Screen.drawSymetric 4
@Screen.drawSymetric$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@4
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawSymetric
0;JMP
(Screen.drawSymetric$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// goto WHILE_EXP0
@Screen.drawCircle$WHILE_EXP0
0;JMP
// label WHILE_END0
(Screen.drawCircle$WHILE_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.new 0
(String.new)
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Memory.alloc 1
@Memory.alloc$ret4
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Memory.alloc$ret4)
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.newLT_58
D;JLT
@SP
A=M-1
M=0
(String.newLT_58)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@String.new$IF_TRUE0
D;JNE
// goto IF_FALSE0
@String.new$IF_FALSE0
0;JMP
// label IF_TRUE0
(String.new$IF_TRUE0)
// push constant 14
@14
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret11
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret11)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(String.new$IF_FALSE0)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.newGT_44
D;JGT
@SP
A=M-1
M=0
(String.newGT_44)
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@String.new$IF_TRUE1
D;JNE
// goto IF_FALSE1
@String.new$IF_FALSE1
0;JMP
// label IF_TRUE1
(String.new$IF_TRUE1)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Array.new 1
@Array.new$ret7
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Array.new$ret7)
// pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1
(String.new$IF_FALSE1)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.dispose 0
(String.dispose)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.disposeGT_45
D;JGT
@SP
A=M-1
M=0
(String.disposeGT_45)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@String.dispose$IF_TRUE0
D;JNE
// goto IF_FALSE0
@String.dispose$IF_FALSE0
0;JMP
// label IF_TRUE0
(String.dispose$IF_TRUE0)
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Array.dispose 1
@Array.dispose$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.dispose
0;JMP
(Array.dispose$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(String.dispose$IF_FALSE0)
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Memory.deAlloc 1
@Memory.deAlloc$ret4
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Memory.deAlloc$ret4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.length 0
(String.length)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.charAt 0
(String.charAt)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.charAtLT_59
D;JLT
@SP
A=M-1
M=0
(String.charAtLT_59)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.charAtGT_46
D;JGT
@SP
A=M-1
M=0
(String.charAtGT_46)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.charAtEQ_32
D;JEQ
@SP
A=M-1
M=0
(String.charAtEQ_32)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@String.charAt$IF_TRUE0
D;JNE
// goto IF_FALSE0
@String.charAt$IF_FALSE0
0;JMP
// label IF_TRUE0
(String.charAt$IF_TRUE0)
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret12
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret12)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(String.charAt$IF_FALSE0)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.setCharAt 0
(String.setCharAt)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.setCharAtLT_60
D;JLT
@SP
A=M-1
M=0
(String.setCharAtLT_60)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.setCharAtGT_47
D;JGT
@SP
A=M-1
M=0
(String.setCharAtGT_47)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.setCharAtEQ_33
D;JEQ
@SP
A=M-1
M=0
(String.setCharAtEQ_33)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@String.setCharAt$IF_TRUE0
D;JNE
// goto IF_FALSE0
@String.setCharAt$IF_FALSE0
0;JMP
// label IF_TRUE0
(String.setCharAt$IF_TRUE0)
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret13
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret13)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(String.setCharAt$IF_FALSE0)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.appendChar 0
(String.appendChar)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.appendCharEQ_34
D;JEQ
@SP
A=M-1
M=0
(String.appendCharEQ_34)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@String.appendChar$IF_TRUE0
D;JNE
// goto IF_FALSE0
@String.appendChar$IF_FALSE0
0;JMP
// label IF_TRUE0
(String.appendChar$IF_TRUE0)
// push constant 17
@17
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret14
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret14)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(String.appendChar$IF_FALSE0)
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.eraseLastChar 0
(String.eraseLastChar)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.eraseLastCharEQ_35
D;JEQ
@SP
A=M-1
M=0
(String.eraseLastCharEQ_35)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@String.eraseLastChar$IF_TRUE0
D;JNE
// goto IF_FALSE0
@String.eraseLastChar$IF_FALSE0
0;JMP
// label IF_TRUE0
(String.eraseLastChar$IF_TRUE0)
// push constant 18
@18
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret15
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret15)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(String.eraseLastChar$IF_FALSE0)
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.intValue 5
(String.intValue)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.intValueEQ_36
D;JEQ
@SP
A=M-1
M=0
(String.intValueEQ_36)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@String.intValue$IF_TRUE0
D;JNE
// goto IF_FALSE0
@String.intValue$IF_FALSE0
0;JMP
// label IF_TRUE0
(String.intValue$IF_TRUE0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// label IF_FALSE0
(String.intValue$IF_FALSE0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 45
@45
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.intValueEQ_37
D;JEQ
@SP
A=M-1
M=0
(String.intValueEQ_37)
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@String.intValue$IF_TRUE1
D;JNE
// goto IF_FALSE1
@String.intValue$IF_FALSE1
0;JMP
// label IF_TRUE1
(String.intValue$IF_TRUE1)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1
(String.intValue$IF_FALSE1)
// label WHILE_EXP0
(String.intValue$WHILE_EXP0)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.intValueLT_61
D;JLT
@SP
A=M-1
M=0
(String.intValueLT_61)
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// and
@SP
AM=M-1
D=M
@SP
A=M-1
M=D&M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@String.intValue$WHILE_END0
D;JNE
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.intValueLT_62
D;JLT
@SP
A=M-1
M=0
(String.intValueLT_62)
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 9
@9
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.intValueGT_48
D;JGT
@SP
A=M-1
M=0
(String.intValueGT_48)
// or
@SP
AM=M-1
D=M
@SP
A=M-1
M=D|M
// not
@SP
A=M-1
M=!M
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@String.intValue$IF_TRUE2
D;JNE
// goto IF_FALSE2
@String.intValue$IF_FALSE2
0;JMP
// label IF_TRUE2
(String.intValue$IF_TRUE2)
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 10
@10
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret28
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret28)
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2
(String.intValue$IF_FALSE2)
// goto WHILE_EXP0
@String.intValue$WHILE_EXP0
0;JMP
// label WHILE_END0
(String.intValue$WHILE_END0)
// push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// if-goto IF_TRUE3
@SP
AM=M-1
D=M
@String.intValue$IF_TRUE3
D;JNE
// goto IF_FALSE3
@String.intValue$IF_FALSE3
0;JMP
// label IF_TRUE3
(String.intValue$IF_TRUE3)
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// neg
@SP
A=M-1
M=-M
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE3
(String.intValue$IF_FALSE3)
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.setInt 4
(String.setInt)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.setIntEQ_38
D;JEQ
@SP
A=M-1
M=0
(String.setIntEQ_38)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE0
D;JNE
// goto IF_FALSE0
@String.setInt$IF_FALSE0
0;JMP
// label IF_TRUE0
(String.setInt$IF_TRUE0)
// push constant 19
@19
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret16
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret16)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(String.setInt$IF_FALSE0)
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Array.new 1
@Array.new$ret8
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Array.new$ret8)
// pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.setIntLT_63
D;JLT
@SP
A=M-1
M=0
(String.setIntLT_63)
// if-goto IF_TRUE1
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE1
D;JNE
// goto IF_FALSE1
@String.setInt$IF_FALSE1
0;JMP
// label IF_TRUE1
(String.setInt$IF_TRUE1)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// neg
@SP
A=M-1
M=-M
// pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1
(String.setInt$IF_FALSE1)
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0
(String.setInt$WHILE_EXP0)
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.setIntGT_49
D;JGT
@SP
A=M-1
M=0
(String.setIntGT_49)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@String.setInt$WHILE_END0
D;JNE
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 10
@10
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.divide 2
@Math.divide$ret12
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Math.divide$ret12)
// pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 10
@10
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Math.multiply 2
@Math.multiply$ret29
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.multiply$ret29)
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0
@String.setInt$WHILE_EXP0
0;JMP
// label WHILE_END0
(String.setInt$WHILE_END0)
// push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// if-goto IF_TRUE2
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE2
D;JNE
// goto IF_FALSE2
@String.setInt$IF_FALSE2
0;JMP
// label IF_TRUE2
(String.setInt$IF_TRUE2)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 45
@45
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2
(String.setInt$IF_FALSE2)
// push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.setIntLT_64
D;JLT
@SP
A=M-1
M=0
(String.setIntLT_64)
// if-goto IF_TRUE3
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE3
D;JNE
// goto IF_FALSE3
@String.setInt$IF_FALSE3
0;JMP
// label IF_TRUE3
(String.setInt$IF_TRUE3)
// push constant 19
@19
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret17
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret17)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE3
(String.setInt$IF_FALSE3)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.setIntEQ_39
D;JEQ
@SP
A=M-1
M=0
(String.setIntEQ_39)
// if-goto IF_TRUE4
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE4
D;JNE
// goto IF_FALSE4
@String.setInt$IF_FALSE4
0;JMP
// label IF_TRUE4
(String.setInt$IF_TRUE4)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push constant 48
@48
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END4
@String.setInt$IF_END4
0;JMP
// label IF_FALSE4
(String.setInt$IF_FALSE4)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1
(String.setInt$WHILE_EXP1)
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@String.setIntLT_65
D;JLT
@SP
A=M-1
M=0
(String.setIntLT_65)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
AM=M-1
D=M
@String.setInt$WHILE_END1
D;JNE
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@R5
D=M
@SP
A=M
M=D
@SP
AM=M+1
// pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
// pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1
@String.setInt$WHILE_EXP1
0;JMP
// label WHILE_END1
(String.setInt$WHILE_END1)
// label IF_END4
(String.setInt$IF_END4)
// push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Array.dispose 1
@Array.dispose$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.dispose
0;JMP
(Array.dispose$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.newLine 0
(String.newLine)
// push constant 128
@128
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.backSpace 0
(String.backSpace)
// push constant 129
@129
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function String.doubleQuote 0
(String.doubleQuote)
// push constant 34
@34
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.init 0
(Sys.init)
// call Memory.init 0
@Memory.init$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.init
0;JMP
(Memory.init$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call Math.init 0
@Math.init$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.init
0;JMP
(Math.init$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call Screen.init 0
@Screen.init$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.init
0;JMP
(Screen.init$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call Output.init 0
@Output.init$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.init
0;JMP
(Output.init$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call Keyboard.init 0
@Keyboard.init$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.init
0;JMP
(Keyboard.init$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call Main.main 0
@Main.main$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.main
0;JMP
(Main.main$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call Sys.halt 0
@Sys.halt$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.halt
0;JMP
(Sys.halt$ret0)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.halt 0
(Sys.halt)
// label WHILE_EXP0
(Sys.halt$WHILE_EXP0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Sys.halt$WHILE_END0
D;JNE
// goto WHILE_EXP0
@Sys.halt$WHILE_EXP0
0;JMP
// label WHILE_END0
(Sys.halt$WHILE_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.wait 1
(Sys.wait)
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Sys.waitLT_66
D;JLT
@SP
A=M-1
M=0
(Sys.waitLT_66)
// if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Sys.wait$IF_TRUE0
D;JNE
// goto IF_FALSE0
@Sys.wait$IF_FALSE0
0;JMP
// label IF_TRUE0
(Sys.wait$IF_TRUE0)
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Sys.error 1
@Sys.error$ret18
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.error$ret18)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// label IF_FALSE0
(Sys.wait$IF_FALSE0)
// label WHILE_EXP0
(Sys.wait$WHILE_EXP0)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Sys.waitGT_50
D;JGT
@SP
A=M-1
M=0
(Sys.waitGT_50)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END0
@SP
AM=M-1
D=M
@Sys.wait$WHILE_END0
D;JNE
// push constant 50
@50
D=A
@SP
A=M
M=D
@SP
AM=M+1
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1
(Sys.wait$WHILE_EXP1)
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@Sys.waitGT_51
D;JGT
@SP
A=M-1
M=0
(Sys.waitGT_51)
// not
@SP
A=M-1
M=!M
// if-goto WHILE_END1
@SP
AM=M-1
D=M
@Sys.wait$WHILE_END1
D;JNE
// push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1
@Sys.wait$WHILE_EXP1
0;JMP
// label WHILE_END1
(Sys.wait$WHILE_END1)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
// pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0
@Sys.wait$WHILE_EXP0
0;JMP
// label WHILE_END0
(Sys.wait$WHILE_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.error 0
(Sys.error)
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.new 1
@String.new$ret4
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(String.new$ret4)
// push constant 69
@69
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret18
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret18)
// push constant 82
@82
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret19
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret19)
// push constant 82
@82
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call String.appendChar 2
@String.appendChar$ret20
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@2
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(String.appendChar$ret20)
// call Output.printString 1
@Output.printString$ret4
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Output.printString$ret4)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
AM=M+1
// call Output.printInt 1
@Output.printInt$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printInt
0;JMP
(Output.printInt$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// call Sys.halt 0
@Sys.halt$ret1
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.halt
0;JMP
(Sys.halt$ret1)
// pop temp 0
@SP
AM=M-1
D=M
@R5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
AM=M+1
// return
@LCL
D=M
@R15
M=D
@5
A=D-A
D=M
@R14
M=D
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R15
D=M
@1
A=D-A
D=M
@THAT
M=D
@R15
D=M
@2
A=D-A
D=M
@THIS
M=D
@R15
D=M
@3
A=D-A
D=M
@ARG
M=D
@R15
D=M
@4
A=D-A
D=M
@LCL
M=D
@R14
A=M
0;JMP
