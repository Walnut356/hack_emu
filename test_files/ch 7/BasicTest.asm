//init 'stack' pointer
@256
D=A
@SP
M=D
//call Sys.init
@Sys.init$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@5
D=A-D
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init$ret0)
//Sys.init should never return, but just in case it does, here's another loop trap
@INFINITE_LOOP
0;JMP
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
AM=M+1
//pop local 0
@0
D=A
@LCL
A=D+M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 21
@21
D=A
@SP
A=M
M=D
@SP
AM=M+1
//push constant 22
@22
D=A
@SP
A=M
M=D
@SP
AM=M+1
//pop argument 2
@2
D=A
@ARG
A=D+M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop argument 1
@1
D=A
@ARG
A=D+M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 36
@36
D=A
@SP
A=M
M=D
@SP
AM=M+1
//pop this 6
@6
D=A
@THIS
A=D+M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 42
@42
D=A
@SP
A=M
M=D
@SP
AM=M+1
//push constant 45
@45
D=A
@SP
A=M
M=D
@SP
AM=M+1
//pop that 5
@5
D=A
@THAT
A=D+M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop that 2
@2
D=A
@THAT
A=D+M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 510
@510
D=A
@SP
A=M
M=D
@SP
AM=M+1
//pop temp 6
@R11
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@0
D=A
@LCL
A=D+M
D=M
@SP
A=M
M=D
@SP
AM=M+1
//push that 5
@5
D=A
@THAT
A=D+M
D=M
@SP
A=M
M=D
@SP
AM=M+1
//add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
//push argument 1
@1
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
AM=M+1
//sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
//push this 6
@6
D=A
@THIS
A=D+M
D=M
@SP
A=M
M=D
@SP
AM=M+1
//push this 6
@6
D=A
@THIS
A=D+M
D=M
@SP
A=M
M=D
@SP
AM=M+1
//add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
//sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
//push temp 6
@R11
D=M
@SP
A=M
M=D
@SP
AM=M+1
//add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
(INFINITE_LOOP)
@INFINITE_LOOP
0;JMP
