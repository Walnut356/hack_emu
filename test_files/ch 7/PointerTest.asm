//init 'stack' pointer
@256
D=A
@SP
M=D
//call Sys.init
@Sys.init$ret0
D=A
@SP
A=M
M=D
@SP
AM=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
AM=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
@0
D=A
@5
D=A-D
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init$ret0)
//Sys.init should never return, but just in case it does, here's another loop trap
@INFINITE_LOOP
0;JMP
//push constant 3030
@3030
D=A
@SP
A=M
M=D
@SP
AM=M+1
//pop pointer 0
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 3040
@3040
D=A
@SP
A=M
M=D
@SP
AM=M+1
//pop pointer 1
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
AM=M+1
//pop this 2
@2
D=A
@THIS
A=D+M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 46
@46
D=A
@SP
A=M
M=D
@SP
AM=M+1
//pop that 6
@6
D=A
@THAT
A=D+M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
AM=M+1
//push pointer 1
@THAT
D=M
@SP
A=M
M=D
@SP
AM=M+1
//add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
//push this 2
@2
D=A
@THIS
A=D+M
D=M
@SP
A=M
M=D
@SP
AM=M+1
//sub
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D
//push that 6
@6
D=A
@THAT
A=D+M
D=M
@SP
A=M
M=D
@SP
AM=M+1
//add
@SP
AM=M-1
D=M
@SP
A=M-1
M=D+M
(INFINITE_LOOP)
@INFINITE_LOOP
0;JMP
