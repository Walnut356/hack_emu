/// logical implementations using only NAND chip + manually constructed chips
pub mod logic_gate {
    pub mod alu;
    pub mod arithmetic;
    pub mod gates;
    pub mod memory;
}

/// shortcut implementations in native rust to speed up processing
pub mod native {
    pub mod alu;
    pub mod gates;
    pub mod memory;
}

#[cfg(test)]
mod test {
    use crate::logic_gate::alu::*;
    use crate::logic_gate::arithmetic::*;
    use crate::logic_gate::gates::*;
    use crate::logic_gate::memory::*;

    #[test]
    fn test_nand() {
        assert_eq!(truth_table(NAND), [[1, 1], [1, 0]])
    }

    #[test]
    fn test_not() {
        assert_eq!(NOT(0), 1);
        assert_eq!(NOT(1), 0);
    }

    #[test]
    fn test_multi_not() {
        assert_eq!(
            multi_NOT(&vec![0, 0, 0, 0, 1, 1, 1, 1]),
            vec![1, 1, 1, 1, 0, 0, 0, 0]
        )
    }

    #[test]
    fn test_and() {
        assert_eq!(truth_table(AND), [[0, 0], [0, 1]])
    }

    #[test]
    fn test_multi_and() {
        assert_eq!(
            multi_AND(&vec![0, 0, 1, 1], &vec![0, 1, 0, 1]),
            vec![0, 0, 0, 1]
        )
    }

    #[test]
    fn test_or() {
        assert_eq!(truth_table(OR), [[0, 1], [1, 1]]);
    }

    // #[test]
    // fn test_multi_or() {

    // }

    #[test]
    fn test_xor() {
        assert_eq!(truth_table(XOR), [[0, 1], [1, 0]]);
    }

    // #[test]
    // fn test_multi_xor() {

    // }

    #[test]
    fn test_mux() {
        assert_eq!(multi_truth_table(MUX), [0, 0, 1, 1, 0, 1, 0, 1]);
        assert_eq!(MUX(0, 0, 0), 0);
        assert_eq!(MUX(0, 0, 1), 0);
        assert_eq!(MUX(0, 1, 0), 0);
        assert_eq!(MUX(1, 0, 1), 0);

        assert_eq!(MUX(0, 1, 1), 1);
        assert_eq!(MUX(1, 0, 0), 1);
        assert_eq!(MUX(1, 1, 0), 1);
        assert_eq!(MUX(1, 1, 1), 1);
    }

    #[test]
    fn test_mux_4() {
        assert_eq!(MUX_4(0, 0, 0, 0, 0, 0), 0);
        assert_eq!(MUX_4(0, 0, 0, 0, 0, 1), 0);
        assert_eq!(MUX_4(0, 0, 0, 0, 1, 0), 0);
        assert_eq!(MUX_4(0, 0, 0, 0, 1, 1), 0);

        assert_eq!(MUX_4(1, 0, 0, 0, 0, 0), 1);
        assert_eq!(MUX_4(0, 1, 0, 0, 0, 1), 1);
        assert_eq!(MUX_4(0, 0, 1, 0, 1, 0), 1);
        assert_eq!(MUX_4(0, 0, 0, 1, 1, 1), 1);
    }

    #[test]
    fn test_multi_mux_4() {
        assert_eq!(
            multi_MUX_4(
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                0,
                0
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            multi_MUX_4(
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                0,
                1
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            multi_MUX_4(
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                1,
                0
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            multi_MUX_4(
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                1,
                1
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            multi_MUX_4(
                &vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                &vec![1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0],
                &vec![1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                &vec![0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                0,
                0
            ),
            vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0]
        );
        assert_eq!(
            multi_MUX_4(
                &vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                &vec![1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0],
                &vec![1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                &vec![0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                0,
                1
            ),
            vec![1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0]
        );
        assert_eq!(
            multi_MUX_4(
                &vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                &vec![1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0],
                &vec![1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                &vec![0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                1,
                0
            ),
            vec![1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
        );
        assert_eq!(
            multi_MUX_4(
                &vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                &vec![1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0],
                &vec![1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                &vec![0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
                1,
                1
            ),
            vec![0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
        );
    }

    #[test]
    fn test_multi_mux_8() {
        assert_eq!(
            multi_MUX_8(
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                0,
                0,
                0
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            multi_MUX_8(
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                0,
                0,
                1
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            multi_MUX_8(
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                0,
                1,
                0
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            multi_MUX_8(
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                0,
                1,
                1
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            multi_MUX_8(
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                1,
                0,
                0
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            multi_MUX_8(
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                1,
                0,
                1
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            multi_MUX_8(
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                1,
                1,
                0
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            multi_MUX_8(
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                1,
                1,
                1
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            multi_MUX_8(
                &vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                &vec![0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1],
                &vec![0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0],
                &vec![0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1],
                &vec![0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0],
                &vec![0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1],
                &vec![0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0],
                &vec![1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1],
                0,
                0,
                0
            ),
            vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0]
        );
        assert_eq!(
            multi_MUX_8(
                &vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                &vec![0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1],
                &vec![0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0],
                &vec![0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1],
                &vec![0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0],
                &vec![0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1],
                &vec![0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0],
                &vec![1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1],
                0,
                0,
                1
            ),
            vec![0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1]
        );
        assert_eq!(
            multi_MUX_8(
                &vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                &vec![0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1],
                &vec![0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0],
                &vec![0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1],
                &vec![0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0],
                &vec![0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1],
                &vec![0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0],
                &vec![1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1],
                0,
                1,
                0
            ),
            vec![0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0]
        );
        assert_eq!(
            multi_MUX_8(
                &vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                &vec![0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1],
                &vec![0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0],
                &vec![0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1],
                &vec![0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0],
                &vec![0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1],
                &vec![0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0],
                &vec![1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1],
                0,
                1,
                1
            ),
            vec![0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1]
        );
        assert_eq!(
            multi_MUX_8(
                &vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                &vec![0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1],
                &vec![0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0],
                &vec![0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1],
                &vec![0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0],
                &vec![0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1],
                &vec![0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0],
                &vec![1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1],
                1,
                0,
                0
            ),
            vec![0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0]
        );
        assert_eq!(
            multi_MUX_8(
                &vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                &vec![0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1],
                &vec![0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0],
                &vec![0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1],
                &vec![0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0],
                &vec![0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1],
                &vec![0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0],
                &vec![1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1],
                1,
                0,
                1
            ),
            vec![0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1]
        );
        assert_eq!(
            multi_MUX_8(
                &vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                &vec![0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1],
                &vec![0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0],
                &vec![0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1],
                &vec![0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0],
                &vec![0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1],
                &vec![0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0],
                &vec![1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1],
                1,
                1,
                0
            ),
            vec![0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0]
        );
        assert_eq!(
            multi_MUX_8(
                &vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                &vec![0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1],
                &vec![0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0],
                &vec![0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1],
                &vec![0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0],
                &vec![0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1],
                &vec![0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0],
                &vec![1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1],
                1,
                1,
                1
            ),
            vec![1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1]
        );
    }

    #[test]
    fn test_demux() {
        assert_eq!(DEMUX(1, 0), [1, 0]);
        assert_eq!(DEMUX(1, 1), [0, 1]);
        assert_eq!(DEMUX(0, 0), [0, 0]);
        assert_eq!(DEMUX(0, 1), [0, 0]);
    }

    #[test]
    fn test_demux_4() {
        assert_eq!(DEMUX_4(0, 0, 0), [0, 0, 0, 0]);
        assert_eq!(DEMUX_4(0, 0, 1), [0, 0, 0, 0]);
        assert_eq!(DEMUX_4(0, 1, 0), [0, 0, 0, 0]);
        assert_eq!(DEMUX_4(0, 1, 1), [0, 0, 0, 0]);
        assert_eq!(DEMUX_4(1, 0, 0), [1, 0, 0, 0]);
        assert_eq!(DEMUX_4(1, 0, 1), [0, 1, 0, 0]);
        assert_eq!(DEMUX_4(1, 1, 0), [0, 0, 1, 0]);
        assert_eq!(DEMUX_4(1, 1, 1), [0, 0, 0, 1]);
    }

    #[test]
    fn test_multi_demux_4() {
        assert_eq!(
            multi_DEMUX_4(&vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, 0),
            [
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        );
        assert_eq!(
            multi_DEMUX_4(&vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, 1),
            [
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        );
        assert_eq!(
            multi_DEMUX_4(&vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 1, 0),
            [
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        );
        assert_eq!(
            multi_DEMUX_4(&vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 1, 1),
            [
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        );
        assert_eq!(
            multi_DEMUX_4(&vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0], 0, 0),
            [
                vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        );
        assert_eq!(
            multi_DEMUX_4(&vec![1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0], 0, 1),
            [
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        );
        assert_eq!(
            multi_DEMUX_4(&vec![1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], 1, 0),
            [
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        );
        assert_eq!(
            multi_DEMUX_4(&vec![0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], 1, 1),
            [
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
            ]
        );
    }

    #[test]
    fn test_demux_8() {
        assert_eq!(DEMUX_8(0, 0, 0, 0), [0, 0, 0, 0, 0, 0, 0, 0]);
        assert_eq!(DEMUX_8(0, 0, 0, 1), [0, 0, 0, 0, 0, 0, 0, 0]);
        assert_eq!(DEMUX_8(0, 0, 1, 0), [0, 0, 0, 0, 0, 0, 0, 0]);
        assert_eq!(DEMUX_8(0, 0, 1, 1), [0, 0, 0, 0, 0, 0, 0, 0]);
        assert_eq!(DEMUX_8(0, 1, 0, 0), [0, 0, 0, 0, 0, 0, 0, 0]);
        assert_eq!(DEMUX_8(0, 1, 0, 1), [0, 0, 0, 0, 0, 0, 0, 0]);
        assert_eq!(DEMUX_8(0, 1, 1, 0), [0, 0, 0, 0, 0, 0, 0, 0]);
        assert_eq!(DEMUX_8(0, 1, 1, 1), [0, 0, 0, 0, 0, 0, 0, 0]);

        assert_eq!(DEMUX_8(1, 0, 0, 0), [1, 0, 0, 0, 0, 0, 0, 0]);
        assert_eq!(DEMUX_8(1, 0, 0, 1), [0, 1, 0, 0, 0, 0, 0, 0]);
        assert_eq!(DEMUX_8(1, 0, 1, 0), [0, 0, 1, 0, 0, 0, 0, 0]);
        assert_eq!(DEMUX_8(1, 0, 1, 1), [0, 0, 0, 1, 0, 0, 0, 0]);
        assert_eq!(DEMUX_8(1, 1, 0, 0), [0, 0, 0, 0, 1, 0, 0, 0]);
        assert_eq!(DEMUX_8(1, 1, 0, 1), [0, 0, 0, 0, 0, 1, 0, 0]);
        assert_eq!(DEMUX_8(1, 1, 1, 0), [0, 0, 0, 0, 0, 0, 1, 0]);
        assert_eq!(DEMUX_8(1, 1, 1, 1), [0, 0, 0, 0, 0, 0, 0, 1]);
    }

    #[test]
    fn test_half_adder() {
        assert_eq!(half_adder(0, 0), Add { sum: 0, carry: 0 });
        assert_eq!(half_adder(0, 1), Add { sum: 1, carry: 0 });
        assert_eq!(half_adder(1, 0), Add { sum: 1, carry: 0 });
        assert_eq!(half_adder(1, 1), Add { sum: 0, carry: 1 });
    }

    #[test]
    fn test_full_adder() {
        assert_eq!(full_adder(0, 0, 0), Add { sum: 0, carry: 0 });
        assert_eq!(full_adder(0, 0, 1), Add { sum: 1, carry: 0 });
        assert_eq!(full_adder(0, 1, 0), Add { sum: 1, carry: 0 });
        assert_eq!(full_adder(0, 1, 1), Add { sum: 0, carry: 1 });
        assert_eq!(full_adder(1, 0, 0), Add { sum: 1, carry: 0 });
        assert_eq!(full_adder(1, 0, 1), Add { sum: 0, carry: 1 });
        assert_eq!(full_adder(1, 1, 0), Add { sum: 0, carry: 1 });
        assert_eq!(full_adder(1, 1, 1), Add { sum: 1, carry: 1 });
    }

    #[test]
    fn test_adder() {
        assert_eq!(
            adder(
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            adder(
                &vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        );
        assert_eq!(
            adder(
                &vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        );
        assert_eq!(
            adder(
                &vec![1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                &vec![0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        );
        assert_eq!(
            adder(
                &vec![0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1],
                &vec![0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]
            ),
            vec![0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1]
        );
        assert_eq!(
            adder(
                &vec![0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                &vec![1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0]
            ),
            vec![1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
        );
    }
    #[test]
    fn test_incrementer() {
        assert_eq!(
            incrementer(&vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
        );
        assert_eq!(
            incrementer(&vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            incrementer(&vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0]
        );
        assert_eq!(
            incrementer(&vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1]),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0]
        );
    }

    #[test]
    fn test_alu() {
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 1,
                    nx: 0,
                    zy: 1,
                    ny: 0,
                    f: 1,
                    no: 0,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 1,
                    nx: 1,
                    zy: 1,
                    ny: 1,
                    f: 1,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 1,
                    nx: 1,
                    zy: 1,
                    ny: 0,
                    f: 1,
                    no: 0,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 0,
                    zy: 1,
                    ny: 1,
                    f: 0,
                    no: 0,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 1,
                    nx: 1,
                    zy: 0,
                    ny: 0,
                    f: 0,
                    no: 0,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 0,
                    zy: 1,
                    ny: 1,
                    f: 0,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 1,
                    nx: 1,
                    zy: 0,
                    ny: 0,
                    f: 0,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 0,
                    zy: 1,
                    ny: 1,
                    f: 1,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 1,
                    nx: 1,
                    zy: 0,
                    ny: 0,
                    f: 1,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 1,
                    zy: 1,
                    ny: 1,
                    f: 1,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 1,
                    nx: 1,
                    zy: 0,
                    ny: 1,
                    f: 1,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 0,
                    zy: 1,
                    ny: 1,
                    f: 1,
                    no: 0,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 1,
                    nx: 1,
                    zy: 0,
                    ny: 0,
                    f: 1,
                    no: 0,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 0,
                    zy: 0,
                    ny: 0,
                    f: 1,
                    no: 0,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 1,
                    zy: 0,
                    ny: 0,
                    f: 1,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 0,
                    zy: 0,
                    ny: 1,
                    f: 1,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 0,
                    zy: 0,
                    ny: 0,
                    f: 0,
                    no: 0,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 1,
                    zy: 0,
                    ny: 1,
                    f: 0,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 1,
                    nx: 0,
                    zy: 1,
                    ny: 0,
                    f: 1,
                    no: 0,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 1,
                    nx: 1,
                    zy: 1,
                    ny: 1,
                    f: 1,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 1,
                    nx: 1,
                    zy: 1,
                    ny: 0,
                    f: 1,
                    no: 0,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 0,
                    zy: 1,
                    ny: 1,
                    f: 0,
                    no: 0,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 1,
                    nx: 1,
                    zy: 0,
                    ny: 0,
                    f: 0,
                    no: 0,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 0,
                    zy: 1,
                    ny: 1,
                    f: 0,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 1,
                    nx: 1,
                    zy: 0,
                    ny: 0,
                    f: 0,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 0,
                    zy: 1,
                    ny: 1,
                    f: 1,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 1,
                    nx: 1,
                    zy: 0,
                    ny: 0,
                    f: 1,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 1,
                    zy: 1,
                    ny: 1,
                    f: 1,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 1,
                    nx: 1,
                    zy: 0,
                    ny: 1,
                    f: 1,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 0,
                    zy: 1,
                    ny: 1,
                    f: 1,
                    no: 0,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 1,
                    nx: 1,
                    zy: 0,
                    ny: 0,
                    f: 1,
                    no: 0,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 0,
                    zy: 0,
                    ny: 0,
                    f: 1,
                    no: 0,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 1,
                    zy: 0,
                    ny: 0,
                    f: 1,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 0,
                    zy: 0,
                    ny: 1,
                    f: 1,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 0,
                    zy: 0,
                    ny: 0,
                    f: 0,
                    no: 0,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
        );
        assert_eq!(
            ALU(
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
                &mut ControlBits {
                    zx: 0,
                    nx: 1,
                    zy: 0,
                    ny: 1,
                    f: 0,
                    no: 1,
                    zr: 0,
                    ng: 0
                }
            ),
            vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1]
        );
    }

    #[test]
    fn test_is_equal() {
        assert_eq!(
            is_zero(&vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
            1
        );
        assert_eq!(
            is_zero(&vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]),
            0
        );
        assert_eq!(
            is_zero(&vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),
            0
        );
    }

    #[test]
    fn test_bit() {
        let mut dff = DFF::new();
        let input = 0;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 1;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 1;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 1;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 1;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 1;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 1;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 1;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 1;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 0;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 1;
        let out = 1;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 0;
        let load = 1;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
        let input = 1;
        let load = 0;
        let out = 0;
        assert_eq!(dff.data, out);
        dff.cycle(input, load);
    }

    #[test]
    pub fn test_ram() {
        let mut ram = crate::native::memory::RAM::new();

        let input = 0;
        let load = 0;
        let address = 0;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 0;
        let load = 0;
        let address = 0;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 0;
        let load = 1;
        let address = 0;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 0;
        let load = 1;
        let address = 0;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 4321;
        let load = 0;
        let address = 0;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 4321;
        let load = 0;
        let address = 0;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 4321;
        let load = 1;
        let address = 4321;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 4321;
        let load = 1;
        let address = 4321;
        assert_eq!(ram.data[address as usize], 4321);
        ram.cycle(input, address, load);
        let input = 4321;
        let load = 0;
        let address = 0;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 4321;
        let load = 0;
        let address = 0;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 12345;
        let load = 0;
        let address = 12345;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 12345;
        let load = 0;
        let address = 12345;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 12345;
        let load = 1;
        let address = 12345;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 12345;
        let load = 1;
        let address = 12345;
        assert_eq!(ram.data[address as usize], 12345);
        ram.cycle(input, address, load);
        let input = 12345;
        let load = 0;
        let address = 12345;
        assert_eq!(ram.data[address as usize], 12345);
        ram.cycle(input, address, load);
        let input = 12345;
        let load = 0;
        let address = 12345;
        assert_eq!(ram.data[address as usize], 12345);
        ram.cycle(input, address, load);
        let input = 12345;
        let load = 0;
        let address = 4321;
        assert_eq!(ram.data[address as usize], 4321);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 0;
        let address = 4321;
        assert_eq!(ram.data[address as usize], 4321);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 0;
        let address = 4321;
        assert_eq!(ram.data[address as usize], 4321);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 1;
        let address = 16383;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 1;
        let address = 16383;
        assert_eq!(ram.data[address as usize], 16383);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 0;
        let address = 16383;
        assert_eq!(ram.data[address as usize], 16383);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 0;
        let address = 16383;
        assert_eq!(ram.data[address as usize], 16383);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 0;
        let address = 12345;
        assert_eq!(ram.data[address as usize], 12345);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 0;
        let address = 16383;
        assert_eq!(ram.data[address as usize], 16383);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 0;
        let address = 10920;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 0;
        let address = 10920;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 0;
        let address = 10921;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 0;
        let address = 10922;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 0;
        let address = 10923;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 0;
        let address = 10924;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 0;
        let address = 10925;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 0;
        let address = 10926;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 16383;
        let load = 0;
        let address = 10927;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 21845;
        let load = 1;
        let address = 10920;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 21845;
        let load = 1;
        let address = 10920;
        assert_eq!(ram.data[address as usize], 21845);
        ram.cycle(input, address, load);
        let input = 21845;
        let load = 1;
        let address = 10921;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 21845;
        let load = 1;
        let address = 10921;
        assert_eq!(ram.data[address as usize], 21845);
        ram.cycle(input, address, load);
        let input = 21845;
        let load = 1;
        let address = 10922;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 21845;
        let load = 1;
        let address = 10922;
        assert_eq!(ram.data[address as usize], 21845);
        ram.cycle(input, address, load);
        let input = 21845;
        let load = 1;
        let address = 10923;
        assert_eq!(ram.data[address as usize], 0);
        ram.cycle(input, address, load);
        let input = 21845;
        let load = 1;
        let address = 10923;
        assert_eq!(ram.data[address as usize], 21845);
        ram.cycle(input, address, load);
    }
}
